// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mesh/v1alpha1/config.proto

// Configuration affecting the service mesh as a whole.

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	v1alpha3 "istio.io/api/networking/v1alpha3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Resource describes the source of configuration
type Resource int32

const (
	// Set to only receive service entries that are generated by the platform.
	// These auto generated service entries are combination of services and endpoints
	// that are generated by a specific platform e.g. k8
	Resource_SERVICE_REGISTRY Resource = 0
)

var Resource_name = map[int32]string{
	0: "SERVICE_REGISTRY",
}

var Resource_value = map[string]int32{
	"SERVICE_REGISTRY": 0,
}

func (x Resource) String() string {
	return proto.EnumName(Resource_name, int32(x))
}

func (Resource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0}
}

type MeshConfig_IngressControllerMode int32

const (
	// Unspecified Istio ingress controller.
	MeshConfig_UNSPECIFIED MeshConfig_IngressControllerMode = 0
	// Disables Istio ingress controller.
	MeshConfig_OFF MeshConfig_IngressControllerMode = 1
	// Istio ingress controller will act on ingress resources that do not
	// contain any annotation or whose annotations match the value
	// specified in the ingress_class parameter described earlier. Use this
	// mode if Istio ingress controller will be the default ingress
	// controller for the entire Kubernetes cluster.
	MeshConfig_DEFAULT MeshConfig_IngressControllerMode = 2
	// Istio ingress controller will only act on ingress resources whose
	// annotations match the value specified in the ingress_class parameter
	// described earlier. Use this mode if Istio ingress controller will be
	// a secondary ingress controller (e.g., in addition to a
	// cloud-provided ingress controller).
	MeshConfig_STRICT MeshConfig_IngressControllerMode = 3
)

var MeshConfig_IngressControllerMode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "OFF",
	2: "DEFAULT",
	3: "STRICT",
}

var MeshConfig_IngressControllerMode_value = map[string]int32{
	"UNSPECIFIED": 0,
	"OFF":         1,
	"DEFAULT":     2,
	"STRICT":      3,
}

func (x MeshConfig_IngressControllerMode) String() string {
	return proto.EnumName(MeshConfig_IngressControllerMode_name, int32(x))
}

func (MeshConfig_IngressControllerMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 0}
}

// $hide_from_docs
type MeshConfig_AuthPolicy int32

const (
	MeshConfig_NONE       MeshConfig_AuthPolicy = 0
	MeshConfig_MUTUAL_TLS MeshConfig_AuthPolicy = 1
)

var MeshConfig_AuthPolicy_name = map[int32]string{
	0: "NONE",
	1: "MUTUAL_TLS",
}

var MeshConfig_AuthPolicy_value = map[string]int32{
	"NONE":       0,
	"MUTUAL_TLS": 1,
}

func (x MeshConfig_AuthPolicy) String() string {
	return proto.EnumName(MeshConfig_AuthPolicy_name, int32(x))
}

func (MeshConfig_AuthPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 1}
}

type MeshConfig_AccessLogEncoding int32

const (
	// text encoding for the proxy access log
	MeshConfig_TEXT MeshConfig_AccessLogEncoding = 0
	// json encoding for the proxy access log
	MeshConfig_JSON MeshConfig_AccessLogEncoding = 1
)

var MeshConfig_AccessLogEncoding_name = map[int32]string{
	0: "TEXT",
	1: "JSON",
}

var MeshConfig_AccessLogEncoding_value = map[string]int32{
	"TEXT": 0,
	"JSON": 1,
}

func (x MeshConfig_AccessLogEncoding) String() string {
	return proto.EnumName(MeshConfig_AccessLogEncoding_name, int32(x))
}

func (MeshConfig_AccessLogEncoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 2}
}

// Default Policy for upgrading http1.1 connections to http2.
type MeshConfig_H2UpgradePolicy int32

const (
	// Do not upgrade connections to http2.
	MeshConfig_DO_NOT_UPGRADE MeshConfig_H2UpgradePolicy = 0
	// Upgrade the connections to http2.
	MeshConfig_UPGRADE MeshConfig_H2UpgradePolicy = 1
)

var MeshConfig_H2UpgradePolicy_name = map[int32]string{
	0: "DO_NOT_UPGRADE",
	1: "UPGRADE",
}

var MeshConfig_H2UpgradePolicy_value = map[string]int32{
	"DO_NOT_UPGRADE": 0,
	"UPGRADE":        1,
}

func (x MeshConfig_H2UpgradePolicy) String() string {
	return proto.EnumName(MeshConfig_H2UpgradePolicy_name, int32(x))
}

func (MeshConfig_H2UpgradePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 3}
}

type MeshConfig_OutboundTrafficPolicy_Mode int32

const (
	// outbound traffic will be restricted to services defined in the
	// service registry as well as those defined through ServiceEntries
	MeshConfig_OutboundTrafficPolicy_REGISTRY_ONLY MeshConfig_OutboundTrafficPolicy_Mode = 0
	// outbound traffic to unknown destinations will be allowed, in case
	// there are no services or ServiceEntries for the destination port
	MeshConfig_OutboundTrafficPolicy_ALLOW_ANY MeshConfig_OutboundTrafficPolicy_Mode = 1
)

var MeshConfig_OutboundTrafficPolicy_Mode_name = map[int32]string{
	0: "REGISTRY_ONLY",
	1: "ALLOW_ANY",
}

var MeshConfig_OutboundTrafficPolicy_Mode_value = map[string]int32{
	"REGISTRY_ONLY": 0,
	"ALLOW_ANY":     1,
}

func (x MeshConfig_OutboundTrafficPolicy_Mode) String() string {
	return proto.EnumName(MeshConfig_OutboundTrafficPolicy_Mode_name, int32(x))
}

func (MeshConfig_OutboundTrafficPolicy_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 0, 0}
}

// TraceContext selects the context propagation headers used for
// distributed tracing.
// $hide_from_docs
type MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext int32

const (
	// Unspecified context. Should not be used for now, but added to reserve
	// the 0 enum value if TraceContext is used outside of a repeated field.
	MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_UNSPECIFIED MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext = 0
	// Use W3C Trace Context propagation using the `traceparent` HTTP header.
	// See the
	// [Trace Context documentation](https://www.w3.org/TR/trace-context/) for details.
	MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_W3C_TRACE_CONTEXT MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext = 1
	// Use gRPC binary context propagation using the `grpc-trace-bin` http header.
	MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_GRPC_BIN MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext = 2
	// Use Cloud Trace context propagation using the
	// `X-Cloud-Trace-Context` http header.
	MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_CLOUD_TRACE_CONTEXT MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext = 3
	// Use multi-header B3 context propagation using the `X-B3-TraceId`,
	// `X-B3-SpanId`, and `X-B3-Sampled` HTTP headers. See
	// [B3 header propagation README](https://github.com/openzipkin/b3-propagation)
	// for details.
	MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_B3 MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext = 4
)

var MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "W3C_TRACE_CONTEXT",
	2: "GRPC_BIN",
	3: "CLOUD_TRACE_CONTEXT",
	4: "B3",
}

var MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext_value = map[string]int32{
	"UNSPECIFIED":         0,
	"W3C_TRACE_CONTEXT":   1,
	"GRPC_BIN":            2,
	"CLOUD_TRACE_CONTEXT": 3,
	"B3":                  4,
}

func (x MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext) String() string {
	return proto.EnumName(MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext_name, int32(x))
}

func (MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 2, 0}
}

// Available propagation modes for trace context
// $hide_from_docs
type MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode int32

const (
	// Propagate trace context in the single header x-ot-span-context.
	MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_ENVOY MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode = 0
	// Propagate trace context using LightStep's native format.
	MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_LIGHTSTEP MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode = 1
	// Propagate trace context using the b3 format.
	MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_B3 MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode = 2
	// Propagation trace context using the w3 trace-context standard.
	MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_TRACE_CONTEXT MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode = 3
)

var MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode_name = map[int32]string{
	0: "ENVOY",
	1: "LIGHTSTEP",
	2: "B3",
	3: "TRACE_CONTEXT",
}

var MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode_value = map[string]int32{
	"ENVOY":         0,
	"LIGHTSTEP":     1,
	"B3":            2,
	"TRACE_CONTEXT": 3,
}

func (x MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode) String() string {
	return proto.EnumName(MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode_name, int32(x))
}

func (MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 4, 0}
}

// MeshConfig defines mesh-wide settings for the Istio service mesh.
type MeshConfig struct {
	// Port on which Envoy should listen for incoming connections from
	// other services. Default port is 15001.
	ProxyListenPort int32 `protobuf:"varint,4,opt,name=proxy_listen_port,json=proxyListenPort,proto3" json:"proxyListenPort,omitempty"`
	// Port on which Envoy should listen for HTTP PROXY requests if set.
	ProxyHttpPort int32 `protobuf:"varint,5,opt,name=proxy_http_port,json=proxyHttpPort,proto3" json:"proxyHttpPort,omitempty"`
	// Connection timeout used by Envoy. (MUST BE >=1ms)
	// Default timeout is 10s.
	ConnectTimeout *types.Duration `protobuf:"bytes,6,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connectTimeout,omitempty"`
	// Automatic protocol detection uses a set of heuristics to
	// determine whether the connection is using TLS or not (on the
	// server side), as well as the application protocol being used
	// (e.g., http vs tcp). These heuristics rely on the client sending
	// the first bits of data. For server first protocols like MySQL,
	// MongoDB, etc. Envoy will timeout on the protocol detection after
	// the specified period, defaulting to non mTLS plain TCP
	// traffic. Set this field to tweak the period that Envoy will wait
	// for the client to send the first bits of data. (MUST BE >=1ms or
	// 0s to disable). Default detection timeout is 5s.
	ProtocolDetectionTimeout *types.Duration `protobuf:"bytes,42,opt,name=protocol_detection_timeout,json=protocolDetectionTimeout,proto3" json:"protocolDetectionTimeout,omitempty"`
	// If set then set `SO_KEEPALIVE` on the socket to enable TCP Keepalives.
	TcpKeepalive *v1alpha3.ConnectionPoolSettings_TCPSettings_TcpKeepalive `protobuf:"bytes,28,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcpKeepalive,omitempty"`
	// Class of ingress resources to be processed by Istio ingress
	// controller. This corresponds to the value of
	// `kubernetes.io/ingress.class` annotation.
	IngressClass string `protobuf:"bytes,7,opt,name=ingress_class,json=ingressClass,proto3" json:"ingressClass,omitempty"`
	// Name of the Kubernetes service used for the istio ingress controller.
	// If no ingress controller is specified, the default value `istio-ingressgateway` is used.
	IngressService string `protobuf:"bytes,8,opt,name=ingress_service,json=ingressService,proto3" json:"ingressService,omitempty"`
	// Defines whether to use Istio ingress controller for annotated or all ingress resources.
	// Default mode is `STRICT`.
	IngressControllerMode MeshConfig_IngressControllerMode `protobuf:"varint,9,opt,name=ingress_controller_mode,json=ingressControllerMode,proto3,enum=istio.mesh.v1alpha1.MeshConfig_IngressControllerMode" json:"ingressControllerMode,omitempty"`
	// Defines which gateway deployment to use as the Ingress controller. This field corresponds to
	// the Gateway.selector field, and will be set as `istio: INGRESS_SELECTOR`.
	// By default, `ingressgateway` is used, which will select the default IngressGateway as it has the
	// `istio: ingressgateway` labels.
	// It is recommended that this is the same value as ingress_service.
	IngressSelector string `protobuf:"bytes,52,opt,name=ingress_selector,json=ingressSelector,proto3" json:"ingressSelector,omitempty"`
	// Flag to control generation of trace spans and request IDs.
	// Requires a trace span collector defined in the proxy configuration.
	EnableTracing bool `protobuf:"varint,12,opt,name=enable_tracing,json=enableTracing,proto3" json:"enableTracing,omitempty"`
	// File address for the proxy access log (e.g. /dev/stdout).
	// Empty value disables access logging.
	AccessLogFile string `protobuf:"bytes,13,opt,name=access_log_file,json=accessLogFile,proto3" json:"accessLogFile,omitempty"`
	// Format for the proxy access log
	// Empty value results in proxy's default access log format
	AccessLogFormat string `protobuf:"bytes,24,opt,name=access_log_format,json=accessLogFormat,proto3" json:"accessLogFormat,omitempty"`
	// Encoding for the proxy access log (`TEXT` or `JSON`).
	// Default value is `TEXT`.
	AccessLogEncoding MeshConfig_AccessLogEncoding `protobuf:"varint,27,opt,name=access_log_encoding,json=accessLogEncoding,proto3,enum=istio.mesh.v1alpha1.MeshConfig_AccessLogEncoding" json:"accessLogEncoding,omitempty"`
	// This flag enables Envoy's gRPC Access Log Service.
	// See [Access Log Service](https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/accesslog/v2/als.proto)
	// for details about Envoy's gRPC Access Log Service API.
	// Default value is `false`.
	EnableEnvoyAccessLogService bool `protobuf:"varint,40,opt,name=enable_envoy_access_log_service,json=enableEnvoyAccessLogService,proto3" json:"enableEnvoyAccessLogService,omitempty"`
	// This flag disables Envoy Listener logs.
	// See [Listener Access Log](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#envoy-v3-api-field-config-listener-v3-listener-access-log)
	// Istio Enables Envoy's listener access logs on "NoRoute" response flag.
	// Default value is `false`.
	DisableEnvoyListenerLog bool `protobuf:"varint,56,opt,name=disable_envoy_listener_log,json=disableEnvoyListenerLog,proto3" json:"disableEnvoyListenerLog,omitempty"`
	// Default proxy config used by gateway and sidecars.
	// In case of Kubernetes, the proxy config is applied once during the injection process,
	// and remain constant for the duration of the pod. The rest of the mesh config can be changed
	// at runtime and config gets distributed dynamically.
	// On Kubernetes, this can be overridden on individual pods with the `proxy.istio.io/config` annotation.
	DefaultConfig *ProxyConfig `protobuf:"bytes,14,opt,name=default_config,json=defaultConfig,proto3" json:"defaultConfig,omitempty"`
	// Set the default behavior of the sidecar for handling outbound
	// traffic from the application.  If your application uses one or
	// more external services that are not known apriori, setting the
	// policy to `ALLOW_ANY` will cause the sidecars to route any unknown
	// traffic originating from the application to its requested
	// destination. Users are strongly encouraged to use ServiceEntries
	// to explicitly declare any external dependencies, instead of using
	// `ALLOW_ANY`, so that traffic to these services can be
	// monitored. Can be overridden at a Sidecar level by setting the
	// `OutboundTrafficPolicy` in the [Sidecar
	// API](https://istio.io/docs/reference/config/networking/sidecar/#OutboundTrafficPolicy).
	// Default mode is `ALLOW_ANY` which means outbound traffic to unknown destinations will be allowed.
	OutboundTrafficPolicy *MeshConfig_OutboundTrafficPolicy `protobuf:"bytes,17,opt,name=outbound_traffic_policy,json=outboundTrafficPolicy,proto3" json:"outboundTrafficPolicy,omitempty"`
	// ConfigSource describes a source of configuration data for networking
	// rules, and other Istio configuration artifacts. Multiple data sources
	// can be configured for a single control plane.
	ConfigSources []*ConfigSource `protobuf:"bytes,22,rep,name=config_sources,json=configSources,proto3" json:"configSources,omitempty"`
	// This flag is used to enable mutual `TLS` automatically for service to service communication
	// within the mesh, default true.
	// If set to true, and a given service does not have a corresponding `DestinationRule` configured,
	// or its `DestinationRule` does not have ClientTLSSettings specified, Istio configures client side
	// TLS configuration appropriately. More specifically,
	// If the upstream authentication policy is in `STRICT` mode, use Istio provisioned certificate
	// for mutual `TLS` to connect to upstream.
	// If upstream service is in plain text mode, use plain text.
	// If the upstream authentication policy is in PERMISSIVE mode, Istio configures clients to use
	// mutual `TLS` when server sides are capable of accepting mutual `TLS` traffic.
	// If service `DestinationRule` exists and has `ClientTLSSettings` specified, that is always used instead.
	EnableAutoMtls *types.BoolValue `protobuf:"bytes,43,opt,name=enable_auto_mtls,json=enableAutoMtls,proto3" json:"enableAutoMtls,omitempty"`
	// The trust domain corresponds to the trust root of a system.
	// Refer to [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain)
	TrustDomain string `protobuf:"bytes,26,opt,name=trust_domain,json=trustDomain,proto3" json:"trustDomain,omitempty"`
	// The trust domain aliases represent the aliases of `trust_domain`.
	// For example, if we have
	// ```yaml
	// trustDomain: td1
	// trustDomainAliases: ["td2", "td3"]
	// ```
	// Any service with the identity `td1/ns/foo/sa/a-service-account`, `td2/ns/foo/sa/a-service-account`,
	// or `td3/ns/foo/sa/a-service-account` will be treated the same in the Istio mesh.
	TrustDomainAliases []string `protobuf:"bytes,46,rep,name=trust_domain_aliases,json=trustDomainAliases,proto3" json:"trustDomainAliases,omitempty"`
	// The extra root certificates for workload-to-workload communication.
	// The plugin certificates (the 'cacerts' secret) or self-signed certificates (the 'istio-ca-secret' secret)
	// are automatically added by Istiod.
	// The CA certificate that signs the workload certificates is automatically added by Istio Agent.
	CaCertificates []*MeshConfig_CertificateData `protobuf:"bytes,58,rep,name=ca_certificates,json=caCertificates,proto3" json:"caCertificates,omitempty"`
	// The default value for the ServiceEntry.export_to field and services
	// imported through container registry integrations, e.g. this applies to
	// Kubernetes Service resources. The value is a list of namespace names and
	// reserved namespace aliases. The allowed namespace aliases are:
	// ```
	// * - All Namespaces
	// . - Current Namespace
	// ~ - No Namespace
	// ```
	// If not set the system will use "*" as the default value which implies that
	// services are exported to all namespaces.
	//
	// `All namespaces` is a reasonable default for implementations that don't
	// need to restrict access or visibility of services across namespace
	// boundaries. If that requirement is present it is generally good practice to
	// make the default `Current namespace` so that services are only visible
	// within their own namespaces by default. Operators can then expand the
	// visibility of services to other namespaces as needed. Use of `No Namespace`
	// is expected to be rare but can have utility for deployments where
	// dependency management needs to be precise even within the scope of a single
	// namespace.
	//
	// For further discussion see the reference documentation for `ServiceEntry`,
	// `Sidecar`, and `Gateway`.
	DefaultServiceExportTo []string `protobuf:"bytes,31,rep,name=default_service_export_to,json=defaultServiceExportTo,proto3" json:"defaultServiceExportTo,omitempty"`
	// The default value for the VirtualService.export_to field. Has the same
	// syntax as `default_service_export_to`.
	//
	// If not set the system will use "*" as the default value which implies that
	// virtual services are exported to all namespaces
	DefaultVirtualServiceExportTo []string `protobuf:"bytes,32,rep,name=default_virtual_service_export_to,json=defaultVirtualServiceExportTo,proto3" json:"defaultVirtualServiceExportTo,omitempty"`
	// The default value for the `DestinationRule.export_to` field. Has the same
	// syntax as `default_service_export_to`.
	//
	// If not set the system will use "*" as the default value which implies that
	// destination rules are exported to all namespaces
	DefaultDestinationRuleExportTo []string `protobuf:"bytes,33,rep,name=default_destination_rule_export_to,json=defaultDestinationRuleExportTo,proto3" json:"defaultDestinationRuleExportTo,omitempty"`
	// The namespace to treat as the administrative root namespace for
	// Istio configuration. When processing a leaf namespace Istio will search for
	// declarations in that namespace first and if none are found it will
	// search in the root namespace. Any matching declaration found in the root
	// namespace is processed as if it were declared in the leaf namespace.
	//
	// The precise semantics of this processing are documented on each resource
	// type.
	RootNamespace string `protobuf:"bytes,34,opt,name=root_namespace,json=rootNamespace,proto3" json:"rootNamespace,omitempty"`
	// Locality based load balancing distribution or failover settings.
	LocalityLbSetting *v1alpha3.LocalityLoadBalancerSetting `protobuf:"bytes,35,opt,name=locality_lb_setting,json=localityLbSetting,proto3" json:"localityLbSetting,omitempty"`
	// Configures DNS refresh rate for Envoy clusters of type `STRICT_DNS`
	// Default refresh rate is `5s`.
	DnsRefreshRate *types.Duration `protobuf:"bytes,36,opt,name=dns_refresh_rate,json=dnsRefreshRate,proto3" json:"dnsRefreshRate,omitempty"`
	// Specify if http1.1 connections should be upgraded to http2 by default.
	// if sidecar is installed on all pods in the mesh, then this should be set to `UPGRADE`.
	// If one or more services or namespaces do not have sidecar(s), then this should be set to `DO_NOT_UPGRADE`.
	// It can be enabled by destination using the `destinationRule.trafficPolicy.connectionPool.http.h2UpgradePolicy` override.
	H2UpgradePolicy MeshConfig_H2UpgradePolicy `protobuf:"varint,41,opt,name=h2_upgrade_policy,json=h2UpgradePolicy,proto3,enum=istio.mesh.v1alpha1.MeshConfig_H2UpgradePolicy" json:"h2UpgradePolicy,omitempty"`
	// Name to be used while emitting statistics for inbound clusters. The same pattern is used while computing stat prefix for
	// network filters like TCP and Redis.
	// By default, Istio emits statistics with the pattern `inbound|<port>|<port-name>|<service-FQDN>`.
	// For example `inbound|7443|grpc-reviews|reviews.prod.svc.cluster.local`. This can be used to override that pattern.
	//
	// A Pattern can be composed of various pre-defined variables. The following variables are supported.
	//
	// - `%SERVICE%` - Will be substituted with name of the service.
	// - `%SERVICE_FQDN%` - Will be substituted with FQDN of the service.
	// - `%SERVICE_PORT%` - Will be substituted with port of the service.
	// - `%SERVICE_PORT_NAME%` - Will be substituted with port name of the service.
	//
	// Following are some examples of supported patterns for reviews:
	//
	// - `%SERVICE_FQDN%_%SERVICE_PORT%` will use reviews.prod.svc.cluster.local_7443 as the stats name.
	// - `%SERVICE%` will use reviews.prod as the stats name.
	InboundClusterStatName string `protobuf:"bytes,44,opt,name=inbound_cluster_stat_name,json=inboundClusterStatName,proto3" json:"inboundClusterStatName,omitempty"`
	// Name to be used while emitting statistics for outbound clusters. The same pattern is used while computing stat prefix for
	// network filters like TCP and Redis.
	// By default, Istio emits statistics with the pattern `outbound|<port>|<subsetname>|<service-FQDN>`.
	// For example `outbound|8080|v2|reviews.prod.svc.cluster.local`. This can be used to override that pattern.
	//
	// A Pattern can be composed of various pre-defined variables. The following variables are supported.
	//
	// - `%SERVICE%` - Will be substituted with name of the service.
	// - `%SERVICE_FQDN%` - Will be substituted with FQDN of the service.
	// - `%SERVICE_PORT%` - Will be substituted with port of the service.
	// - `%SERVICE_PORT_NAME%` - Will be substituted with port name of the service.
	// - `%SUBSET_NAME%` - Will be substituted with subset.
	//
	// Following are some examples of supported patterns for reviews:
	//
	// - `%SERVICE_FQDN%_%SERVICE_PORT%` will use `reviews.prod.svc.cluster.local_7443` as the stats name.
	// - `%SERVICE%` will use reviews.prod as the stats name.
	OutboundClusterStatName string `protobuf:"bytes,45,opt,name=outbound_cluster_stat_name,json=outboundClusterStatName,proto3" json:"outboundClusterStatName,omitempty"`
	// Configure the provision of certificates.
	Certificates []*Certificate `protobuf:"bytes,47,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// Set configuration for Thrift protocol
	ThriftConfig *MeshConfig_ThriftConfig `protobuf:"bytes,49,opt,name=thrift_config,json=thriftConfig,proto3" json:"thriftConfig,omitempty"`
	// $hide_from_docs
	// Settings to be applied to select services.
	ServiceSettings []*MeshConfig_ServiceSettings `protobuf:"bytes,50,rep,name=service_settings,json=serviceSettings,proto3" json:"serviceSettings,omitempty"`
	// If enabled, Istio agent will merge metrics exposed by the application with metrics from Envoy
	// and Istio agent. The sidecar injection will replace `prometheus.io` annotations present on the pod
	// and redirect them towards Istio agent, which will then merge metrics of from the application with Istio metrics.
	// This relies on the annotations `prometheus.io/scrape`, `prometheus.io/port`, and
	// `prometheus.io/path` annotations.
	// If you are running a separately managed Envoy with an Istio sidecar, this may cause issues, as the metrics will collide.
	// In this case, it is recommended to disable aggregation on that deployment with the
	// `prometheus.istio.io/merge-metrics: "false"` annotation.
	// If not specified, this will be enabled by default.
	EnablePrometheusMerge *types.BoolValue `protobuf:"bytes,51,opt,name=enable_prometheus_merge,json=enablePrometheusMerge,proto3" json:"enablePrometheusMerge,omitempty"`
	// `VerifyCertificateAtClient` sets the mesh global default for peer certificate validation
	// at the client-side proxy when `SIMPLE` TLS or `MUTUAL` TLS (non `ISTIO_MUTUAL`) origination
	// modes are used. This setting can be overridden at the host level via DestinationRule API.
	// By default, `VerifyCertificateAtClient` is `true`.
	//
	// `CaCertificates`: If set, proxy verifies CA signature based on given CaCertificates. If unset,
	// and VerifyCertificateAtClient is true, proxy uses default System CA bundle. If unset and
	// `VerifyCertificateAtClient` is false, proxy will not verify the CA.
	//
	// `SubjectAltNames`: If set, proxy verifies subject alt names are present in the SAN. If unset,
	// and `VerifyCertificateAtClient` is true, proxy uses host in destination rule to verify the SANs.
	// If unset, and `VerifyCertificateAtClient` is false, proxy does not verify SANs.
	//
	// For SAN, client-side proxy will exact match host in `DestinationRule` as well as one level
	// wildcard if the specified host in DestinationRule doesn't contain a wildcard.
	// For example, if the host in `DestinationRule` is `x.y.com`, client-side proxy will
	// match either `x.y.com` or `*.y.com` for the SAN in the presented server certificate.
	// For wildcard host name in DestinationRule, client-side proxy will do a suffix match. For example,
	// if host is `*.x.y.com`, client-side proxy will verify the presented server certificate SAN matches
	// ``.x.y.com` suffix.
	VerifyCertificateAtClient *types.BoolValue `protobuf:"bytes,54,opt,name=verify_certificate_at_client,json=verifyCertificateAtClient,proto3" json:"verifyCertificateAtClient,omitempty"`
	// $hide_from_docs
	// If specified, Istiod will authorize and forward the CSRs from the workloads to the specified external CA
	// using the Istio CA gRPC API.
	Ca *MeshConfig_CA `protobuf:"bytes,55,opt,name=ca,proto3" json:"ca,omitempty"`
	// Defines a list of extension providers that extend Istio's functionality. For example, the AuthorizationPolicy
	// can be used with an extension provider to delegate the authorization decision to a custom authorization system.
	ExtensionProviders []*MeshConfig_ExtensionProvider `protobuf:"bytes,57,rep,name=extension_providers,json=extensionProviders,proto3" json:"extensionProviders,omitempty"`
	// A list of Kubernetes selectors that specify the set of namespaces that Istio considers when
	// computing configuration updates for sidecars. This can be used to reduce Istio's computational load
	// by limiting the number of entities (including services, pods, and endpoints) that are watched and processed.
	// If omitted, Istio will use the default behavior of processing all namespaces in the cluster.
	// Elements in the list are disjunctive (OR semantics), i.e. a namespace will be included if it matches any selector.
	// The following example selects any namespace with either labels `env: prod` and `region: us-east1`,
	// or with label `app` equal to `cassandra` or `spark`.
	// ```yaml
	// discoverySelectors:
	//  - matchLabels:
	//      env: prod
	//      region: us-east1
	//  - matchExpressions:
	//    - key: app
	//      operator: In
	//      values:
	//        - cassandra
	//        - spark
	// ```
	// Refer to the [kubernetes selector docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)
	// for additional detail on selector semantics.
	DiscoverySelectors   []*v1.LabelSelector `protobuf:"bytes,59,rep,name=discovery_selectors,json=discoverySelectors,proto3" json:"discoverySelectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MeshConfig) Reset()         { *m = MeshConfig{} }
func (m *MeshConfig) String() string { return proto.CompactTextString(m) }
func (*MeshConfig) ProtoMessage()    {}
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0}
}
func (m *MeshConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig.Merge(m, src)
}
func (m *MeshConfig) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig proto.InternalMessageInfo

func (m *MeshConfig) GetProxyListenPort() int32 {
	if m != nil {
		return m.ProxyListenPort
	}
	return 0
}

func (m *MeshConfig) GetProxyHttpPort() int32 {
	if m != nil {
		return m.ProxyHttpPort
	}
	return 0
}

func (m *MeshConfig) GetConnectTimeout() *types.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *MeshConfig) GetProtocolDetectionTimeout() *types.Duration {
	if m != nil {
		return m.ProtocolDetectionTimeout
	}
	return nil
}

func (m *MeshConfig) GetTcpKeepalive() *v1alpha3.ConnectionPoolSettings_TCPSettings_TcpKeepalive {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

func (m *MeshConfig) GetIngressClass() string {
	if m != nil {
		return m.IngressClass
	}
	return ""
}

func (m *MeshConfig) GetIngressService() string {
	if m != nil {
		return m.IngressService
	}
	return ""
}

func (m *MeshConfig) GetIngressControllerMode() MeshConfig_IngressControllerMode {
	if m != nil {
		return m.IngressControllerMode
	}
	return MeshConfig_UNSPECIFIED
}

func (m *MeshConfig) GetIngressSelector() string {
	if m != nil {
		return m.IngressSelector
	}
	return ""
}

func (m *MeshConfig) GetEnableTracing() bool {
	if m != nil {
		return m.EnableTracing
	}
	return false
}

func (m *MeshConfig) GetAccessLogFile() string {
	if m != nil {
		return m.AccessLogFile
	}
	return ""
}

func (m *MeshConfig) GetAccessLogFormat() string {
	if m != nil {
		return m.AccessLogFormat
	}
	return ""
}

func (m *MeshConfig) GetAccessLogEncoding() MeshConfig_AccessLogEncoding {
	if m != nil {
		return m.AccessLogEncoding
	}
	return MeshConfig_TEXT
}

func (m *MeshConfig) GetEnableEnvoyAccessLogService() bool {
	if m != nil {
		return m.EnableEnvoyAccessLogService
	}
	return false
}

func (m *MeshConfig) GetDisableEnvoyListenerLog() bool {
	if m != nil {
		return m.DisableEnvoyListenerLog
	}
	return false
}

func (m *MeshConfig) GetDefaultConfig() *ProxyConfig {
	if m != nil {
		return m.DefaultConfig
	}
	return nil
}

func (m *MeshConfig) GetOutboundTrafficPolicy() *MeshConfig_OutboundTrafficPolicy {
	if m != nil {
		return m.OutboundTrafficPolicy
	}
	return nil
}

func (m *MeshConfig) GetConfigSources() []*ConfigSource {
	if m != nil {
		return m.ConfigSources
	}
	return nil
}

func (m *MeshConfig) GetEnableAutoMtls() *types.BoolValue {
	if m != nil {
		return m.EnableAutoMtls
	}
	return nil
}

func (m *MeshConfig) GetTrustDomain() string {
	if m != nil {
		return m.TrustDomain
	}
	return ""
}

func (m *MeshConfig) GetTrustDomainAliases() []string {
	if m != nil {
		return m.TrustDomainAliases
	}
	return nil
}

func (m *MeshConfig) GetCaCertificates() []*MeshConfig_CertificateData {
	if m != nil {
		return m.CaCertificates
	}
	return nil
}

func (m *MeshConfig) GetDefaultServiceExportTo() []string {
	if m != nil {
		return m.DefaultServiceExportTo
	}
	return nil
}

func (m *MeshConfig) GetDefaultVirtualServiceExportTo() []string {
	if m != nil {
		return m.DefaultVirtualServiceExportTo
	}
	return nil
}

func (m *MeshConfig) GetDefaultDestinationRuleExportTo() []string {
	if m != nil {
		return m.DefaultDestinationRuleExportTo
	}
	return nil
}

func (m *MeshConfig) GetRootNamespace() string {
	if m != nil {
		return m.RootNamespace
	}
	return ""
}

func (m *MeshConfig) GetLocalityLbSetting() *v1alpha3.LocalityLoadBalancerSetting {
	if m != nil {
		return m.LocalityLbSetting
	}
	return nil
}

func (m *MeshConfig) GetDnsRefreshRate() *types.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *MeshConfig) GetH2UpgradePolicy() MeshConfig_H2UpgradePolicy {
	if m != nil {
		return m.H2UpgradePolicy
	}
	return MeshConfig_DO_NOT_UPGRADE
}

func (m *MeshConfig) GetInboundClusterStatName() string {
	if m != nil {
		return m.InboundClusterStatName
	}
	return ""
}

func (m *MeshConfig) GetOutboundClusterStatName() string {
	if m != nil {
		return m.OutboundClusterStatName
	}
	return ""
}

func (m *MeshConfig) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *MeshConfig) GetThriftConfig() *MeshConfig_ThriftConfig {
	if m != nil {
		return m.ThriftConfig
	}
	return nil
}

func (m *MeshConfig) GetServiceSettings() []*MeshConfig_ServiceSettings {
	if m != nil {
		return m.ServiceSettings
	}
	return nil
}

func (m *MeshConfig) GetEnablePrometheusMerge() *types.BoolValue {
	if m != nil {
		return m.EnablePrometheusMerge
	}
	return nil
}

func (m *MeshConfig) GetVerifyCertificateAtClient() *types.BoolValue {
	if m != nil {
		return m.VerifyCertificateAtClient
	}
	return nil
}

func (m *MeshConfig) GetCa() *MeshConfig_CA {
	if m != nil {
		return m.Ca
	}
	return nil
}

func (m *MeshConfig) GetExtensionProviders() []*MeshConfig_ExtensionProvider {
	if m != nil {
		return m.ExtensionProviders
	}
	return nil
}

func (m *MeshConfig) GetDiscoverySelectors() []*v1.LabelSelector {
	if m != nil {
		return m.DiscoverySelectors
	}
	return nil
}

type MeshConfig_OutboundTrafficPolicy struct {
	Mode                 MeshConfig_OutboundTrafficPolicy_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=istio.mesh.v1alpha1.MeshConfig_OutboundTrafficPolicy_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *MeshConfig_OutboundTrafficPolicy) Reset()         { *m = MeshConfig_OutboundTrafficPolicy{} }
func (m *MeshConfig_OutboundTrafficPolicy) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_OutboundTrafficPolicy) ProtoMessage()    {}
func (*MeshConfig_OutboundTrafficPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 0}
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.Merge(m, src)
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_OutboundTrafficPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_OutboundTrafficPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_OutboundTrafficPolicy proto.InternalMessageInfo

func (m *MeshConfig_OutboundTrafficPolicy) GetMode() MeshConfig_OutboundTrafficPolicy_Mode {
	if m != nil {
		return m.Mode
	}
	return MeshConfig_OutboundTrafficPolicy_REGISTRY_ONLY
}

type MeshConfig_CertificateData struct {
	// Types that are valid to be assigned to CertificateData:
	//	*MeshConfig_CertificateData_Pem
	//	*MeshConfig_CertificateData_SpiffeBundleUrl
	CertificateData      isMeshConfig_CertificateData_CertificateData `protobuf_oneof:"certificate_data"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *MeshConfig_CertificateData) Reset()         { *m = MeshConfig_CertificateData{} }
func (m *MeshConfig_CertificateData) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_CertificateData) ProtoMessage()    {}
func (*MeshConfig_CertificateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 1}
}
func (m *MeshConfig_CertificateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_CertificateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_CertificateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_CertificateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_CertificateData.Merge(m, src)
}
func (m *MeshConfig_CertificateData) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_CertificateData) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_CertificateData.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_CertificateData proto.InternalMessageInfo

type isMeshConfig_CertificateData_CertificateData interface {
	isMeshConfig_CertificateData_CertificateData()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MeshConfig_CertificateData_Pem struct {
	Pem string `protobuf:"bytes,1,opt,name=pem,proto3,oneof" json:"pem,omitempty"`
}
type MeshConfig_CertificateData_SpiffeBundleUrl struct {
	SpiffeBundleUrl string `protobuf:"bytes,2,opt,name=spiffe_bundle_url,json=spiffeBundleUrl,proto3,oneof" json:"spiffeBundleUrl,omitempty"`
}

func (*MeshConfig_CertificateData_Pem) isMeshConfig_CertificateData_CertificateData()             {}
func (*MeshConfig_CertificateData_SpiffeBundleUrl) isMeshConfig_CertificateData_CertificateData() {}

func (m *MeshConfig_CertificateData) GetCertificateData() isMeshConfig_CertificateData_CertificateData {
	if m != nil {
		return m.CertificateData
	}
	return nil
}

func (m *MeshConfig_CertificateData) GetPem() string {
	if x, ok := m.GetCertificateData().(*MeshConfig_CertificateData_Pem); ok {
		return x.Pem
	}
	return ""
}

func (m *MeshConfig_CertificateData) GetSpiffeBundleUrl() string {
	if x, ok := m.GetCertificateData().(*MeshConfig_CertificateData_SpiffeBundleUrl); ok {
		return x.SpiffeBundleUrl
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MeshConfig_CertificateData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MeshConfig_CertificateData_Pem)(nil),
		(*MeshConfig_CertificateData_SpiffeBundleUrl)(nil),
	}
}

type MeshConfig_ThriftConfig struct {
	// Specify thrift rate limit service URL. If pilot has thrift protocol support enabled,
	// this will enable the rate limit service for destinations that have matching rate
	// limit configurations.
	RateLimitUrl string `protobuf:"bytes,1,opt,name=rate_limit_url,json=rateLimitUrl,proto3" json:"rateLimitUrl,omitempty"`
	// Specify thrift rate limit service timeout, in milliseconds. Default is `50ms`
	RateLimitTimeout     *types.Duration `protobuf:"bytes,2,opt,name=rate_limit_timeout,json=rateLimitTimeout,proto3" json:"rateLimitTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MeshConfig_ThriftConfig) Reset()         { *m = MeshConfig_ThriftConfig{} }
func (m *MeshConfig_ThriftConfig) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ThriftConfig) ProtoMessage()    {}
func (*MeshConfig_ThriftConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 2}
}
func (m *MeshConfig_ThriftConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ThriftConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ThriftConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ThriftConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ThriftConfig.Merge(m, src)
}
func (m *MeshConfig_ThriftConfig) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ThriftConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ThriftConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ThriftConfig proto.InternalMessageInfo

func (m *MeshConfig_ThriftConfig) GetRateLimitUrl() string {
	if m != nil {
		return m.RateLimitUrl
	}
	return ""
}

func (m *MeshConfig_ThriftConfig) GetRateLimitTimeout() *types.Duration {
	if m != nil {
		return m.RateLimitTimeout
	}
	return nil
}

// $hide_from_docs
// Settings to be applied to select services.
//
// For example, the following configures all services in namespace "foo" as well as the
// "bar" service in namespace "baz" to be considered cluster-local:
//
// ```yaml
// serviceSettings:
//   - settings:
//       cluster_local: true
//     hosts:
//       - "*.foo.svc.cluster.local"
//       - "bar.baz.svc.cluster.local"
// ```
type MeshConfig_ServiceSettings struct {
	// The settings to apply to the selected services.
	Settings *MeshConfig_ServiceSettings_Settings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	// The services to which the Settings should be applied. Services are selected using the hostname
	// matching rules used by DestinationRule.
	//
	// For example: foo.bar.svc.cluster.local, *.baz.svc.cluster.local
	Hosts                []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ServiceSettings) Reset()         { *m = MeshConfig_ServiceSettings{} }
func (m *MeshConfig_ServiceSettings) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ServiceSettings) ProtoMessage()    {}
func (*MeshConfig_ServiceSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 3}
}
func (m *MeshConfig_ServiceSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ServiceSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ServiceSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ServiceSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ServiceSettings.Merge(m, src)
}
func (m *MeshConfig_ServiceSettings) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ServiceSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ServiceSettings.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ServiceSettings proto.InternalMessageInfo

func (m *MeshConfig_ServiceSettings) GetSettings() *MeshConfig_ServiceSettings_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *MeshConfig_ServiceSettings) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

// Settings for the selected services.
type MeshConfig_ServiceSettings_Settings struct {
	// If true, specifies that the client and service endpoints must reside in the same cluster.
	// By default, in multi-cluster deployments, the Istio control plane assumes all service
	// endpoints to be reachable from any client in any of the clusters which are part of the
	// mesh. This configuration option limits the set of service endpoints visible to a client
	// to be cluster scoped.
	//
	// There are some common scenarios when this can be useful:
	//
	//   - A service (or group of services) is inherently local to the cluster and has local storage
	//     for that cluster. For example, the kube-system namespace (e.g. the Kube API Server).
	//   - A mesh administrator wants to slowly migrate services to Istio. They might start by first
	//     having services cluster-local and then slowly transition them to mesh-wide. They could do
	//     this service-by-service (e.g. mysvc.myns.svc.cluster.local) or as a group
	//     (e.g. *.myns.svc.cluster.local).
	//
	// By default, Istio will consider all services in the kube-system namespace to be cluster-local,
	// unless explicitly overridden here.
	ClusterLocal         bool     `protobuf:"varint,1,opt,name=cluster_local,json=clusterLocal,proto3" json:"clusterLocal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ServiceSettings_Settings) Reset()         { *m = MeshConfig_ServiceSettings_Settings{} }
func (m *MeshConfig_ServiceSettings_Settings) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ServiceSettings_Settings) ProtoMessage()    {}
func (*MeshConfig_ServiceSettings_Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 3, 0}
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ServiceSettings_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ServiceSettings_Settings.Merge(m, src)
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ServiceSettings_Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ServiceSettings_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ServiceSettings_Settings proto.InternalMessageInfo

func (m *MeshConfig_ServiceSettings_Settings) GetClusterLocal() bool {
	if m != nil {
		return m.ClusterLocal
	}
	return false
}

type MeshConfig_CA struct {
	// REQUIRED. Address of the CA server implementing the Istio CA gRPC API.
	// Can be IP address or a fully qualified DNS name with port
	// Eg: custom-ca.default.svc.cluster.local:8932, 192.168.23.2:9000
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Use the tls_settings to specify the tls mode to use.
	// Regarding tls_settings:
	// - DISABLE MODE is legitimate for the case Istiod is making the request via an Envoy sidecar.
	// DISABLE MODE can also be used for testing
	// - TLS MUTUAL MODE be on by default. If the CA certificates
	// (cert bundle to verify the CA server's certificate) is omitted, Istiod will
	// use the system root certs to verify the CA server's certificate.
	TlsSettings *v1alpha3.ClientTLSSettings `protobuf:"bytes,2,opt,name=tls_settings,json=tlsSettings,proto3" json:"tlsSettings,omitempty"`
	// timeout for forward CSR requests from Istiod to External CA
	// Default: 10s
	RequestTimeout *types.Duration `protobuf:"bytes,3,opt,name=request_timeout,json=requestTimeout,proto3" json:"requestTimeout,omitempty"`
	// Use istiod_side to specify CA Server integrate to Istiod side or Agent side
	// Default: true
	IstiodSide           bool     `protobuf:"varint,4,opt,name=istiod_side,json=istiodSide,proto3" json:"istiodSide,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_CA) Reset()         { *m = MeshConfig_CA{} }
func (m *MeshConfig_CA) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_CA) ProtoMessage()    {}
func (*MeshConfig_CA) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 4}
}
func (m *MeshConfig_CA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_CA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_CA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_CA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_CA.Merge(m, src)
}
func (m *MeshConfig_CA) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_CA) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_CA.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_CA proto.InternalMessageInfo

func (m *MeshConfig_CA) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MeshConfig_CA) GetTlsSettings() *v1alpha3.ClientTLSSettings {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (m *MeshConfig_CA) GetRequestTimeout() *types.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *MeshConfig_CA) GetIstiodSide() bool {
	if m != nil {
		return m.IstiodSide
	}
	return false
}

type MeshConfig_ExtensionProvider struct {
	// REQUIRED. A unique name identifying the extension provider.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// REQUIRED. Specifies detailed configuration for the extension provider.
	//
	// Types that are valid to be assigned to Provider:
	//	*MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp
	//	*MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc
	//	*MeshConfig_ExtensionProvider_Opencensus
	//	*MeshConfig_ExtensionProvider_Zipkin
	//	*MeshConfig_ExtensionProvider_Lightstep
	//	*MeshConfig_ExtensionProvider_Datadog
	//	*MeshConfig_ExtensionProvider_Stackdriver
	Provider             isMeshConfig_ExtensionProvider_Provider `protobuf_oneof:"provider"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *MeshConfig_ExtensionProvider) Reset()         { *m = MeshConfig_ExtensionProvider{} }
func (m *MeshConfig_ExtensionProvider) String() string { return proto.CompactTextString(m) }
func (*MeshConfig_ExtensionProvider) ProtoMessage()    {}
func (*MeshConfig_ExtensionProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5}
}
func (m *MeshConfig_ExtensionProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider proto.InternalMessageInfo

type isMeshConfig_ExtensionProvider_Provider interface {
	isMeshConfig_ExtensionProvider_Provider()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp struct {
	EnvoyExtAuthzHttp *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider `protobuf:"bytes,2,opt,name=envoy_ext_authz_http,json=envoyExtAuthzHttp,proto3,oneof" json:"envoyExtAuthzHttp,omitempty"`
}
type MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc struct {
	EnvoyExtAuthzGrpc *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider `protobuf:"bytes,3,opt,name=envoy_ext_authz_grpc,json=envoyExtAuthzGrpc,proto3,oneof" json:"envoyExtAuthzGrpc,omitempty"`
}
type MeshConfig_ExtensionProvider_Opencensus struct {
	Opencensus *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider `protobuf:"bytes,4,opt,name=opencensus,proto3,oneof" json:"opencensus,omitempty"`
}
type MeshConfig_ExtensionProvider_Zipkin struct {
	Zipkin *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider `protobuf:"bytes,5,opt,name=zipkin,proto3,oneof" json:"zipkin,omitempty"`
}
type MeshConfig_ExtensionProvider_Lightstep struct {
	Lightstep *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider `protobuf:"bytes,6,opt,name=lightstep,proto3,oneof" json:"lightstep,omitempty"`
}
type MeshConfig_ExtensionProvider_Datadog struct {
	Datadog *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider `protobuf:"bytes,7,opt,name=datadog,proto3,oneof" json:"datadog,omitempty"`
}
type MeshConfig_ExtensionProvider_Stackdriver struct {
	Stackdriver *MeshConfig_ExtensionProvider_StackdriverProvider `protobuf:"bytes,8,opt,name=stackdriver,proto3,oneof" json:"stackdriver,omitempty"`
}

func (*MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp) isMeshConfig_ExtensionProvider_Provider() {}
func (*MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc) isMeshConfig_ExtensionProvider_Provider() {}
func (*MeshConfig_ExtensionProvider_Opencensus) isMeshConfig_ExtensionProvider_Provider()        {}
func (*MeshConfig_ExtensionProvider_Zipkin) isMeshConfig_ExtensionProvider_Provider()            {}
func (*MeshConfig_ExtensionProvider_Lightstep) isMeshConfig_ExtensionProvider_Provider()         {}
func (*MeshConfig_ExtensionProvider_Datadog) isMeshConfig_ExtensionProvider_Provider()           {}
func (*MeshConfig_ExtensionProvider_Stackdriver) isMeshConfig_ExtensionProvider_Provider()       {}

func (m *MeshConfig_ExtensionProvider) GetProvider() isMeshConfig_ExtensionProvider_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider) GetEnvoyExtAuthzHttp() *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp); ok {
		return x.EnvoyExtAuthzHttp
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetEnvoyExtAuthzGrpc() *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc); ok {
		return x.EnvoyExtAuthzGrpc
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetOpencensus() *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_Opencensus); ok {
		return x.Opencensus
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetZipkin() *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_Zipkin); ok {
		return x.Zipkin
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetLightstep() *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_Lightstep); ok {
		return x.Lightstep
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetDatadog() *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_Datadog); ok {
		return x.Datadog
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider) GetStackdriver() *MeshConfig_ExtensionProvider_StackdriverProvider {
	if x, ok := m.GetProvider().(*MeshConfig_ExtensionProvider_Stackdriver); ok {
		return x.Stackdriver
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MeshConfig_ExtensionProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp)(nil),
		(*MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc)(nil),
		(*MeshConfig_ExtensionProvider_Opencensus)(nil),
		(*MeshConfig_ExtensionProvider_Zipkin)(nil),
		(*MeshConfig_ExtensionProvider_Lightstep)(nil),
		(*MeshConfig_ExtensionProvider_Datadog)(nil),
		(*MeshConfig_ExtensionProvider_Stackdriver)(nil),
	}
}

type MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider struct {
	// REQUIRED. Specifies the service that implements the Envoy ext_authz HTTP authorization service.
	// The format is "[<Namespace>/]<Hostname>". The specification of <Namespace> is required only when it is insufficient
	// to unambiguously resolve a service in the service registry. The <Hostname> is a fully qualified host name of a
	// service defined by the Kubernetes service or ServiceEntry.
	//
	// Example: "my-ext-authz.foo.svc.cluster.local" or "bar/my-ext-authz.example.com".
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// REQUIRED. Specifies the port of the service.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Sets a prefix to the value of authorization request header *Path*.
	// For example, setting this to "/check" for an original user request at path "/admin" will cause the
	// authorization check request to be sent to the authorization service at the path "/check/admin" instead of "/admin".
	PathPrefix string `protobuf:"bytes,3,opt,name=path_prefix,json=pathPrefix,proto3" json:"pathPrefix,omitempty"`
	// If true, the user request will be allowed even if the communication with the authorization service has failed,
	// or if the authorization service has returned a HTTP 5xx error.
	// Default is false and the request will be rejected with "Forbidden" response.
	FailOpen bool `protobuf:"varint,4,opt,name=fail_open,json=failOpen,proto3" json:"failOpen,omitempty"`
	// Sets the HTTP status that is returned to the client when there is a network error to the authorization service.
	// The default status is "403" (HTTP Forbidden).
	StatusOnError string `protobuf:"bytes,5,opt,name=status_on_error,json=statusOnError,proto3" json:"statusOnError,omitempty"`
	// List of headers that should be included in the authorization request sent to the authorization service.
	// Note that in addition to the headers supplied by users:
	// 1. *Host*, *Method*, *Path* and *Content-Length* are automatically sent.
	// 2. *Content-Length* will be set to 0 and the request will not have a message body.
	IncludeHeadersInCheck []string `protobuf:"bytes,6,rep,name=include_headers_in_check,json=includeHeadersInCheck,proto3" json:"includeHeadersInCheck,omitempty"`
	// List of headers from the authorization service that should be added or overridden in the original request and
	// forwarded to the upstream when the authorization check result is allowed (HTTP code 200).
	// If not specified, the original request will not be modified and forwarded to backend as-is.
	// Note, any existing headers will be overridden.
	HeadersToUpstreamOnAllow []string `protobuf:"bytes,7,rep,name=headers_to_upstream_on_allow,json=headersToUpstreamOnAllow,proto3" json:"headersToUpstreamOnAllow,omitempty"`
	// List of headers from the authorization service that should be forwarded to downstream when the authorization
	// check result is not allowed (HTTP code other than 200).
	// If not specified, all the authorization response headers, except *Authority (Host)* will be in the response to
	// the downstream.
	// When a header is included in this list, *Path*, *Status*, *Content-Length*, *WWWAuthenticate* and *Location* are
	// automatically added.
	// Note, the body from the authorization service is always included in the response to downstream.
	HeadersToDownstreamOnDeny []string `protobuf:"bytes,8,rep,name=headers_to_downstream_on_deny,json=headersToDownstreamOnDeny,proto3" json:"headersToDownstreamOnDeny,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider{}
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 0}
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetPathPrefix() string {
	if m != nil {
		return m.PathPrefix
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetFailOpen() bool {
	if m != nil {
		return m.FailOpen
	}
	return false
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetStatusOnError() string {
	if m != nil {
		return m.StatusOnError
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetIncludeHeadersInCheck() []string {
	if m != nil {
		return m.IncludeHeadersInCheck
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetHeadersToUpstreamOnAllow() []string {
	if m != nil {
		return m.HeadersToUpstreamOnAllow
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) GetHeadersToDownstreamOnDeny() []string {
	if m != nil {
		return m.HeadersToDownstreamOnDeny
	}
	return nil
}

type MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider struct {
	// REQUIRED. Specifies the service that implements the Envoy ext_authz gRPC authorization service.
	// The format is "[<Namespace>/]<Hostname>". The specification of <Namespace> is required only when it is insufficient
	// to unambiguously resolve a service in the service registry. The <Hostname> is a fully qualified host name of a
	// service defined by the Kubernetes service or ServiceEntry.
	//
	// Example: "my-ext-authz.foo.svc.cluster.local" or "bar/my-ext-authz.example.com".
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// REQUIRED. Specifies the port of the service.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// If true, the user request will be allowed even if the communication with the authorization service has failed,
	// or if the authorization service has returned a HTTP 5xx error.
	// Default is false and the request will be rejected with "Forbidden" response.
	FailOpen bool `protobuf:"varint,3,opt,name=fail_open,json=failOpen,proto3" json:"failOpen,omitempty"`
	// Sets the HTTP status that is returned to the client when there is a network error to the authorization service.
	// The default status is "403" (HTTP Forbidden).
	StatusOnError        string   `protobuf:"bytes,4,opt,name=status_on_error,json=statusOnError,proto3" json:"statusOnError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider{}
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 1}
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) GetFailOpen() bool {
	if m != nil {
		return m.FailOpen
	}
	return false
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) GetStatusOnError() string {
	if m != nil {
		return m.StatusOnError
	}
	return ""
}

// EnvoyTracingOpenCensusProvider defines configuration for an OpenCensus tracer writing to
// an OpenCensus agent backend. See
// [Envoy's OpenCensus trace configuration](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/trace/v3/opencensus.proto)
// and
// [OpenCensus trace config](https://github.com/census-instrumentation/opencensus-proto/blob/master/src/opencensus/proto/trace/v1/trace_config.proto)
// for details.
// $hide_from_docs
type MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider struct {
	// REQUIRED. gRPC address for the OpenCensus agent (e.g. dns://authority/host:port or
	// unix:path). See [gRPC naming docs](https://github.com/grpc/grpc/blob/master/doc/naming.md) for
	// details.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Specifies the set of context propagation headers used for
	// distributed tracing.
	// $hide_from_docs
	Context              []MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext `protobuf:"varint,2,rep,packed,name=context,proto3,enum=istio.mesh.v1alpha1.MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                   `json:"-"`
	XXX_unrecognized     []byte                                                                     `json:"-"`
	XXX_sizecache        int32                                                                      `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider{}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 2}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) GetContext() []MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext {
	if m != nil {
		return m.Context
	}
	return nil
}

// $hide_from_docs
type MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider struct {
	// REQUIRED. Address of the Datadog Agent.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider{}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 3}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// $hide_from_docs
type MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider struct {
	// REQUIRED. Address of the Lightstep Satellite pool.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// REQUIRED. The Lightstep access token.
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"accessToken,omitempty"`
	// Optional. Propagation modes to use by LightStep's tracer.
	PropagationModes     []MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode `protobuf:"varint,3,rep,packed,name=propagation_modes,json=propagationModes,proto3,enum=istio.mesh.v1alpha1.MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode" json:"propagationModes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                                     `json:"-"`
	XXX_unrecognized     []byte                                                                       `json:"-"`
	XXX_sizecache        int32                                                                        `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider{}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 4}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) GetPropagationModes() []MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode {
	if m != nil {
		return m.PropagationModes
	}
	return nil
}

// $hide_from_docs
type MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider struct {
	// REQUIRED. Specifies the service that implements the Zipkin API.
	// The format is "[<Namespace>/]<Service>". If the <Namespace> is omitted then it is resolved within the same
	// namespace as this configuration resource. The <Service> is the name of the service object (k8s service or ServiceEntry).
	// Example: "foo/zipkin" or "zipkin".
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// REQUIRED. Specifies the port of the Zipkin API service.
	// Typically, this is 9411.
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider{}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 5}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// $hide_from_docs
type MeshConfig_ExtensionProvider_StackdriverProvider struct {
	// debug enables trace output to stdout.
	// $hide_from_docs
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// The global default max number of attributes per trace span.
	// default is 200.
	// $hide_from_docs
	MaxTraceAttributes *types.Int64Value `protobuf:"bytes,2,opt,name=max_trace_attributes,json=maxTraceAttributes,proto3" json:"maxTraceAttributes,omitempty"`
	// The global default max number of annotation events per trace span.
	// default is 200.
	// $hide_from_docs
	MaxTraceAnnotations *types.Int64Value `protobuf:"bytes,3,opt,name=max_trace_annotations,json=maxTraceAnnotations,proto3" json:"maxTraceAnnotations,omitempty"`
	// The global default max number of message events per trace span.
	// default is 200.
	// $hide_from_docs
	MaxTraceMessageEvents *types.Int64Value `protobuf:"bytes,4,opt,name=max_trace_message_events,json=maxTraceMessageEvents,proto3" json:"maxTraceMessageEvents,omitempty"`
	// Optional. Allows configuration of the size of the LogWrite request. The
	// size is in bytes, so that it allows for better performance. Default is 4MB.
	// The size of one log entry within LogWrite request is approx 1Kb.
	// $hide_from_docs
	MaxLogBatchSizeInBytes *types.Int32Value `protobuf:"bytes,5,opt,name=max_log_batch_size_in_bytes,json=maxLogBatchSizeInBytes,proto3" json:"maxLogBatchSizeInBytes,omitempty"`
	// Optional. Allows configuration of the time between calls out to the
	// Stackdriver logging service to report buffered LogWrite request.
	// Customers can choose to report more aggressively by keeping shorter report
	// interval if needed. Default is 10s.
	// $hide_from_docs
	LogReportDuration *types.Duration `protobuf:"bytes,6,opt,name=log_report_duration,json=logReportDuration,proto3" json:"logReportDuration,omitempty"`
	// Optional. Allows enabling log compression for stackdriver access logs.
	// $hide_from_docs
	EnableLogCompression *types.BoolValue `protobuf:"bytes,7,opt,name=enable_log_compression,json=enableLogCompression,proto3" json:"enableLogCompression,omitempty"`
	// Optional. Controls whether to export audit log.
	// $hide_from_docs
	EnableAuditLog bool `protobuf:"varint,8,opt,name=enable_audit_log,json=enableAuditLog,proto3" json:"enableAuditLog,omitempty"`
	// Optional. Controls reporting via meshtelemetry.googleapis.com.
	// $hide_from_docs
	EnableMeshEdgesReporting bool `protobuf:"varint,9,opt,name=enable_mesh_edges_reporting,json=enableMeshEdgesReporting,proto3" json:"enableMeshEdgesReporting,omitempty"`
	// Optional. Allows configuration of time between flush of accumulated
	// edge data.
	// $hide_from_docs
	MeshEdgesReportingDuration *types.Duration `protobuf:"bytes,10,opt,name=mesh_edges_reporting_duration,json=meshEdgesReportingDuration,proto3" json:"meshEdgesReportingDuration,omitempty"`
	// Optional. Configures max number of peer info in edge data caches.
	// $hide_from_docs
	MaxPeerCacheSize *types.Int32Value `protobuf:"bytes,11,opt,name=max_peer_cache_size,json=maxPeerCacheSize,proto3" json:"maxPeerCacheSize,omitempty"`
	// Optional. Configures max number of edges per batch in requests.
	// $hide_from_docs
	MaxEdgesBatchSize    *types.Int32Value `protobuf:"bytes,12,opt,name=max_edges_batch_size,json=maxEdgesBatchSize,proto3" json:"maxEdgesBatchSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) Reset() {
	*m = MeshConfig_ExtensionProvider_StackdriverProvider{}
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) String() string {
	return proto.CompactTextString(m)
}
func (*MeshConfig_ExtensionProvider_StackdriverProvider) ProtoMessage() {}
func (*MeshConfig_ExtensionProvider_StackdriverProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{0, 5, 6}
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshConfig_ExtensionProvider_StackdriverProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshConfig_ExtensionProvider_StackdriverProvider.Merge(m, src)
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) XXX_Size() int {
	return m.Size()
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshConfig_ExtensionProvider_StackdriverProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MeshConfig_ExtensionProvider_StackdriverProvider proto.InternalMessageInfo

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMaxTraceAttributes() *types.Int64Value {
	if m != nil {
		return m.MaxTraceAttributes
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMaxTraceAnnotations() *types.Int64Value {
	if m != nil {
		return m.MaxTraceAnnotations
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMaxTraceMessageEvents() *types.Int64Value {
	if m != nil {
		return m.MaxTraceMessageEvents
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMaxLogBatchSizeInBytes() *types.Int32Value {
	if m != nil {
		return m.MaxLogBatchSizeInBytes
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetLogReportDuration() *types.Duration {
	if m != nil {
		return m.LogReportDuration
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetEnableLogCompression() *types.BoolValue {
	if m != nil {
		return m.EnableLogCompression
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetEnableAuditLog() bool {
	if m != nil {
		return m.EnableAuditLog
	}
	return false
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetEnableMeshEdgesReporting() bool {
	if m != nil {
		return m.EnableMeshEdgesReporting
	}
	return false
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMeshEdgesReportingDuration() *types.Duration {
	if m != nil {
		return m.MeshEdgesReportingDuration
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMaxPeerCacheSize() *types.Int32Value {
	if m != nil {
		return m.MaxPeerCacheSize
	}
	return nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) GetMaxEdgesBatchSize() *types.Int32Value {
	if m != nil {
		return m.MaxEdgesBatchSize
	}
	return nil
}

// ConfigSource describes information about a configuration store inside a
// mesh. A single control plane instance can interact with one or more data
// sources.
type ConfigSource struct {
	// Address of the server implementing the Istio Mesh Configuration
	// protocol (MCP). Can be IP address or a fully qualified DNS name.
	// Use fs:/// to specify a file-based backend with absolute path to the directory.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Use the tls_settings to specify the tls mode to use. If the MCP server
	// uses Istio mutual TLS and shares the root CA with Pilot, specify the TLS
	// mode as `ISTIO_MUTUAL`.
	TlsSettings *v1alpha3.ClientTLSSettings `protobuf:"bytes,2,opt,name=tls_settings,json=tlsSettings,proto3" json:"tlsSettings,omitempty"`
	// Describes the source of configuration, if nothing is specified default is MCP
	SubscribedResources  []Resource `protobuf:"varint,3,rep,packed,name=subscribed_resources,json=subscribedResources,proto3,enum=istio.mesh.v1alpha1.Resource" json:"subscribedResources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ConfigSource) Reset()         { *m = ConfigSource{} }
func (m *ConfigSource) String() string { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()    {}
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{1}
}
func (m *ConfigSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSource.Merge(m, src)
}
func (m *ConfigSource) XXX_Size() int {
	return m.Size()
}
func (m *ConfigSource) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSource.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSource proto.InternalMessageInfo

func (m *ConfigSource) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ConfigSource) GetTlsSettings() *v1alpha3.ClientTLSSettings {
	if m != nil {
		return m.TlsSettings
	}
	return nil
}

func (m *ConfigSource) GetSubscribedResources() []Resource {
	if m != nil {
		return m.SubscribedResources
	}
	return nil
}

// Certificate configures the provision of a certificate and its key.
// Example 1: key and cert stored in a secret
// ```
// { secretName: galley-cert
//   secretNamespace: istio-system
//   dnsNames:
//     - galley.istio-system.svc
//     - galley.mydomain.com
// }
// ```
// Example 2: key and cert stored in a directory
// ```
// { dnsNames:
//     - pilot.istio-system
//     - pilot.istio-system.svc
//     - pilot.mydomain.com
// }
// ```
type Certificate struct {
	// Name of the secret the certificate and its key will be stored into.
	// If it is empty, it will not be stored into a secret.
	// Instead, the certificate and its key will be stored into a hard-coded directory.
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secretName,omitempty"`
	// The DNS names for the certificate. A certificate may contain
	// multiple DNS names.
	DnsNames             []string `protobuf:"bytes,2,rep,name=dns_names,json=dnsNames,proto3" json:"dnsNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5c7ece76d5d5022, []int{2}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *Certificate) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

func init() {
	proto.RegisterEnum("istio.mesh.v1alpha1.Resource", Resource_name, Resource_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_IngressControllerMode", MeshConfig_IngressControllerMode_name, MeshConfig_IngressControllerMode_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_AuthPolicy", MeshConfig_AuthPolicy_name, MeshConfig_AuthPolicy_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_AccessLogEncoding", MeshConfig_AccessLogEncoding_name, MeshConfig_AccessLogEncoding_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_H2UpgradePolicy", MeshConfig_H2UpgradePolicy_name, MeshConfig_H2UpgradePolicy_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_OutboundTrafficPolicy_Mode", MeshConfig_OutboundTrafficPolicy_Mode_name, MeshConfig_OutboundTrafficPolicy_Mode_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext", MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext_name, MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext_value)
	proto.RegisterEnum("istio.mesh.v1alpha1.MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode", MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode_name, MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode_value)
	proto.RegisterType((*MeshConfig)(nil), "istio.mesh.v1alpha1.MeshConfig")
	proto.RegisterType((*MeshConfig_OutboundTrafficPolicy)(nil), "istio.mesh.v1alpha1.MeshConfig.OutboundTrafficPolicy")
	proto.RegisterType((*MeshConfig_CertificateData)(nil), "istio.mesh.v1alpha1.MeshConfig.CertificateData")
	proto.RegisterType((*MeshConfig_ThriftConfig)(nil), "istio.mesh.v1alpha1.MeshConfig.ThriftConfig")
	proto.RegisterType((*MeshConfig_ServiceSettings)(nil), "istio.mesh.v1alpha1.MeshConfig.ServiceSettings")
	proto.RegisterType((*MeshConfig_ServiceSettings_Settings)(nil), "istio.mesh.v1alpha1.MeshConfig.ServiceSettings.Settings")
	proto.RegisterType((*MeshConfig_CA)(nil), "istio.mesh.v1alpha1.MeshConfig.CA")
	proto.RegisterType((*MeshConfig_ExtensionProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.EnvoyExternalAuthorizationHttpProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.EnvoyExternalAuthorizationGrpcProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.EnvoyTracingOpenCensusProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.EnvoyTracingDatadogProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.EnvoyTracingLightStepProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.EnvoyTracingZipkinAPIProvider")
	proto.RegisterType((*MeshConfig_ExtensionProvider_StackdriverProvider)(nil), "istio.mesh.v1alpha1.MeshConfig.ExtensionProvider.StackdriverProvider")
	proto.RegisterType((*ConfigSource)(nil), "istio.mesh.v1alpha1.ConfigSource")
	proto.RegisterType((*Certificate)(nil), "istio.mesh.v1alpha1.Certificate")
}

func init() { proto.RegisterFile("mesh/v1alpha1/config.proto", fileDescriptor_b5c7ece76d5d5022) }

var fileDescriptor_b5c7ece76d5d5022 = []byte{
	// 3114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xdd, 0x72, 0x1b, 0xb9,
	0x72, 0x36, 0x29, 0xda, 0x1a, 0x81, 0xfa, 0x19, 0x42, 0x92, 0x3d, 0xa6, 0xd7, 0x5a, 0x59, 0x7b,
	0xd6, 0xab, 0xe3, 0x6c, 0xa8, 0x63, 0x69, 0xcf, 0xfe, 0x9c, 0x53, 0x49, 0x85, 0x22, 0x69, 0x4b,
	0x3c, 0x94, 0xc8, 0x0c, 0x29, 0xef, 0xcf, 0x49, 0x0a, 0x05, 0xcd, 0x80, 0x24, 0xa2, 0xe1, 0x60,
	0x02, 0x80, 0xb2, 0xe4, 0xaa, 0x3c, 0x41, 0xf2, 0x04, 0xc9, 0x33, 0x24, 0x37, 0xb9, 0xc8, 0x2b,
	0xa4, 0x2a, 0x37, 0xb9, 0xc8, 0x03, 0xa4, 0xb6, 0xf2, 0x0e, 0xa9, 0xdc, 0xa5, 0xf0, 0x33, 0xe4,
	0xe8, 0x67, 0xc5, 0xe3, 0xdd, 0xad, 0x73, 0xc7, 0x69, 0x74, 0x7f, 0x0d, 0x34, 0xba, 0x1b, 0xdd,
	0x4d, 0x50, 0x1e, 0x11, 0x31, 0xdc, 0x39, 0x7f, 0x89, 0xa3, 0x64, 0x88, 0x5f, 0xee, 0x04, 0x2c,
	0xee, 0xd3, 0x41, 0x25, 0xe1, 0x4c, 0x32, 0xb8, 0x4a, 0x85, 0xa4, 0xac, 0xa2, 0x38, 0x2a, 0x29,
	0x47, 0x79, 0x63, 0xc0, 0xd8, 0x20, 0x22, 0x3b, 0x9a, 0xe5, 0x74, 0xdc, 0xdf, 0x09, 0xc7, 0x1c,
	0x4b, 0xca, 0x62, 0x23, 0x74, 0x73, 0xfd, 0x2d, 0xc7, 0x49, 0x42, 0xb8, 0xb0, 0xeb, 0x8f, 0xaf,
	0x2a, 0x4c, 0x38, 0xbb, 0xb8, 0xb4, 0x4b, 0x2f, 0x62, 0x22, 0xdf, 0x32, 0x7e, 0x46, 0xe3, 0x41,
	0xca, 0xb0, 0xb7, 0x13, 0x12, 0x21, 0x69, 0xac, 0x35, 0x20, 0x3e, 0x8e, 0x88, 0xe5, 0xfd, 0xec,
	0xec, 0x4b, 0x51, 0xa1, 0x6c, 0x07, 0x27, 0x74, 0x84, 0x83, 0x21, 0x8d, 0x09, 0xbf, 0xdc, 0x49,
	0xce, 0x06, 0x8a, 0x20, 0x76, 0x46, 0x44, 0xe2, 0x9d, 0xf3, 0x97, 0x3b, 0x03, 0x12, 0x13, 0x8e,
	0x25, 0x09, 0x8d, 0xd4, 0xd6, 0xbf, 0x7d, 0x05, 0xc0, 0x11, 0x11, 0xc3, 0x9a, 0x3e, 0x26, 0x7c,
	0x01, 0x4a, 0x5a, 0x3f, 0x8a, 0xa8, 0x90, 0x24, 0x46, 0x09, 0xe3, 0xd2, 0x2b, 0x6c, 0xe6, 0xb6,
	0xef, 0xfb, 0x2b, 0x7a, 0xa1, 0xa5, 0xe9, 0x1d, 0xc6, 0x25, 0x7c, 0x0e, 0x0c, 0x09, 0x0d, 0xa5,
	0x4c, 0x0c, 0xe7, 0x7d, 0xcd, 0xb9, 0xa4, 0xc9, 0x07, 0x52, 0x26, 0x9a, 0x6f, 0x1f, 0xac, 0x04,
	0x2c, 0x8e, 0x49, 0x20, 0x91, 0xa4, 0x23, 0xc2, 0xc6, 0xd2, 0x7b, 0xb0, 0x99, 0xdb, 0x2e, 0xee,
	0x3e, 0xae, 0x18, 0xcb, 0x54, 0x52, 0xcb, 0x54, 0xea, 0xd6, 0x72, 0xfe, 0xb2, 0x95, 0xe8, 0x19,
	0x01, 0xf8, 0x35, 0x28, 0x6b, 0xa6, 0x80, 0x45, 0x28, 0x24, 0x92, 0x04, 0xfa, 0xf4, 0x29, 0xdc,
	0x8b, 0x59, 0x70, 0x5e, 0x2a, 0x5c, 0x4f, 0x65, 0x53, 0x60, 0x06, 0x96, 0x64, 0x90, 0xa0, 0x33,
	0x42, 0x12, 0x1c, 0xd1, 0x73, 0xe2, 0x7d, 0xa0, 0xb1, 0x9a, 0x15, 0x73, 0xd3, 0x53, 0xfb, 0xa7,
	0xf7, 0xbd, 0x57, 0xa9, 0x99, 0xad, 0x51, 0x16, 0x77, 0x18, 0x8b, 0xba, 0x44, 0x4a, 0x1a, 0x0f,
	0x44, 0xa5, 0x57, 0xeb, 0x4c, 0x7f, 0x07, 0xc9, 0xef, 0x52, 0x44, 0x7f, 0x51, 0x66, 0xbe, 0xe0,
	0x47, 0x60, 0x89, 0xc6, 0x03, 0x4e, 0x84, 0x40, 0x41, 0x84, 0x85, 0xf0, 0xe6, 0x37, 0x73, 0xdb,
	0x0b, 0xfe, 0xa2, 0x25, 0xd6, 0x14, 0x0d, 0x7e, 0x02, 0x56, 0x52, 0x26, 0x41, 0xf8, 0x39, 0x0d,
	0x88, 0xe7, 0x68, 0xb6, 0x65, 0x4b, 0xee, 0x1a, 0x2a, 0x1c, 0x81, 0x47, 0x13, 0x34, 0x16, 0x4b,
	0xce, 0xa2, 0x88, 0x70, 0x34, 0x62, 0x21, 0xf1, 0x16, 0x36, 0x73, 0xdb, 0xcb, 0xbb, 0xbf, 0xae,
	0xdc, 0xe2, 0xb2, 0x95, 0xe9, 0x8d, 0x57, 0x0e, 0xad, 0xde, 0x89, 0xf4, 0x11, 0x0b, 0x89, 0xbf,
	0x4e, 0x6f, 0x23, 0xc3, 0x5f, 0x02, 0x77, 0xba, 0xaf, 0x88, 0x04, 0x92, 0x71, 0xef, 0x33, 0xbd,
	0xb1, 0x95, 0xc9, 0xc6, 0x0c, 0x19, 0x7e, 0x0c, 0x96, 0x49, 0x8c, 0x4f, 0x23, 0x82, 0x24, 0xc7,
	0x01, 0x8d, 0x07, 0xde, 0xe2, 0x66, 0x6e, 0xdb, 0xf1, 0x97, 0x0c, 0xb5, 0x67, 0x88, 0xca, 0x89,
	0x70, 0x10, 0x28, 0xc0, 0x88, 0x0d, 0x50, 0x9f, 0x46, 0xc4, 0x5b, 0xd2, 0x80, 0x4b, 0x86, 0xdc,
	0x62, 0x83, 0x57, 0x34, 0x22, 0xca, 0x31, 0xb3, 0x7c, 0x8c, 0x8f, 0xb0, 0xf4, 0x3c, 0xa3, 0x7a,
	0xca, 0xa9, 0xc9, 0x10, 0x83, 0xd5, 0x0c, 0x2f, 0x89, 0x03, 0x16, 0x2a, 0xfd, 0x4f, 0xb4, 0x41,
	0x5e, 0xce, 0x32, 0x48, 0x35, 0x45, 0x6b, 0x58, 0x41, 0xbf, 0x84, 0xaf, 0x93, 0x60, 0x1d, 0x7c,
	0x68, 0x4f, 0x47, 0xe2, 0x73, 0x76, 0x89, 0x32, 0xfa, 0xd2, 0x0b, 0xdb, 0xd6, 0xc7, 0x7d, 0x62,
	0xd8, 0x1a, 0x8a, 0x6b, 0x82, 0x9c, 0xde, 0xde, 0x6f, 0x41, 0x39, 0xa4, 0x22, 0x03, 0x63, 0xa2,
	0x8e, 0x70, 0x05, 0xe4, 0x7d, 0xa9, 0x01, 0x1e, 0x59, 0x0e, 0x8d, 0xd0, 0xb2, 0xeb, 0x2d, 0x36,
	0x80, 0xaf, 0xc1, 0x72, 0x48, 0xfa, 0x78, 0x1c, 0x49, 0x64, 0x72, 0x94, 0xb7, 0xac, 0x5d, 0x77,
	0xf3, 0xd6, 0x03, 0x76, 0x54, 0x48, 0x9a, 0x13, 0xfa, 0x4b, 0x56, 0xce, 0xc6, 0xfc, 0x08, 0x3c,
	0x62, 0x63, 0x79, 0xca, 0xc6, 0x71, 0xa8, 0xee, 0xaa, 0xdf, 0xa7, 0x01, 0x4a, 0x58, 0x44, 0x83,
	0x4b, 0xaf, 0xa4, 0x11, 0x67, 0xfa, 0x50, 0xdb, 0x8a, 0xf7, 0x8c, 0x74, 0x47, 0x0b, 0xfb, 0xeb,
	0xec, 0x36, 0x32, 0x3c, 0x00, 0xcb, 0x66, 0xbf, 0x48, 0xb0, 0x31, 0x0f, 0x88, 0xf0, 0x1e, 0x6e,
	0xce, 0x6d, 0x17, 0x77, 0x9f, 0xdd, 0xaa, 0xc5, 0x68, 0xe8, 0x6a, 0x4e, 0x7f, 0x29, 0xc8, 0x7c,
	0x09, 0x58, 0x07, 0xae, 0xbd, 0x04, 0x3c, 0x96, 0x0c, 0x8d, 0x64, 0x24, 0xbc, 0x3f, 0xd1, 0x3b,
	0x2e, 0xdf, 0x48, 0x05, 0xfb, 0x8c, 0x45, 0x6f, 0x70, 0x34, 0x26, 0xbe, 0x75, 0xcb, 0xea, 0x58,
	0xb2, 0x23, 0x19, 0x09, 0xf8, 0x0c, 0x2c, 0x4a, 0x3e, 0x16, 0x12, 0x85, 0x6c, 0x84, 0x69, 0xec,
	0x95, 0xb5, 0x53, 0x15, 0x35, 0xad, 0xae, 0x49, 0xf0, 0x57, 0x60, 0x2d, 0xcb, 0x82, 0x70, 0x44,
	0xb1, 0x20, 0xc2, 0xab, 0x6c, 0xce, 0x6d, 0x2f, 0xf8, 0x30, 0xc3, 0x5a, 0x35, 0x2b, 0xf0, 0x1b,
	0xb0, 0x12, 0x60, 0x14, 0x10, 0x2e, 0x69, 0x9f, 0x06, 0x58, 0x12, 0xe1, 0xfd, 0x46, 0x9f, 0x72,
	0x67, 0x96, 0x2d, 0x6b, 0x53, 0x99, 0x3a, 0x96, 0xd8, 0x5f, 0x0e, 0x70, 0x86, 0x24, 0xe0, 0x57,
	0xe0, 0x71, 0x7a, 0xed, 0xd6, 0xd3, 0x10, 0xb9, 0x50, 0xc9, 0x17, 0x49, 0xe6, 0x7d, 0xa8, 0x37,
	0xf4, 0xd0, 0x32, 0x58, 0x37, 0x6b, 0xe8, 0xe5, 0x1e, 0x83, 0x07, 0xe0, 0x59, 0x2a, 0x7a, 0x4e,
	0xb9, 0x1c, 0xe3, 0xe8, 0x16, 0x88, 0x4d, 0x0d, 0xf1, 0xd4, 0x32, 0xbe, 0x31, 0x7c, 0xd7, 0x91,
	0x9a, 0x60, 0x2b, 0x45, 0xba, 0xfe, 0x1a, 0x65, 0xa0, 0x9e, 0x69, 0xa8, 0x0d, 0xcb, 0x59, 0x9f,
	0x32, 0xfa, 0xe3, 0x68, 0x8a, 0xf5, 0x31, 0x58, 0xe6, 0x8c, 0x49, 0x14, 0xe3, 0x11, 0x11, 0x09,
	0x0e, 0x88, 0xb7, 0x65, 0x12, 0x80, 0xa2, 0x1e, 0xa7, 0x44, 0xd8, 0x07, 0xab, 0x11, 0x0b, 0x70,
	0x44, 0xe5, 0x25, 0x8a, 0x4e, 0x91, 0x30, 0xa9, 0xd6, 0xfb, 0x48, 0xdf, 0xf7, 0xe7, 0x77, 0xa4,
	0xeb, 0x96, 0x95, 0x6a, 0x31, 0x1c, 0xee, 0xe3, 0x08, 0xc7, 0x01, 0xe1, 0x36, 0x51, 0xfb, 0xa5,
	0x14, 0xb2, 0x75, 0x6a, 0x49, 0xb0, 0x06, 0xdc, 0x30, 0x16, 0x88, 0x93, 0x3e, 0x27, 0x62, 0x88,
	0xd4, 0x5b, 0xe9, 0xfd, 0x62, 0xe6, 0x73, 0x15, 0xc6, 0xc2, 0x37, 0x12, 0x3e, 0x96, 0x04, 0xfe,
	0x1e, 0x94, 0x86, 0xbb, 0x68, 0x9c, 0x0c, 0x38, 0x0e, 0x49, 0x1a, 0x4c, 0xbf, 0xd4, 0xf9, 0x67,
	0xa6, 0x03, 0x1c, 0xec, 0x9e, 0x18, 0x39, 0x1b, 0x46, 0x2b, 0xc3, 0xab, 0x04, 0xe5, 0x01, 0x34,
	0x36, 0xe1, 0x1a, 0x44, 0x63, 0x21, 0x09, 0x47, 0x42, 0x62, 0x63, 0x40, 0xef, 0x53, 0x6d, 0xbb,
	0x87, 0x96, 0xa1, 0x66, 0xd6, 0xbb, 0x12, 0x6b, 0x4b, 0xaa, 0x84, 0x33, 0x09, 0xf5, 0x9b, 0xb2,
	0x7f, 0xaa, 0x65, 0x27, 0xc9, 0xe0, 0xba, 0x70, 0x1d, 0x2c, 0x5e, 0x71, 0xe8, 0x1d, 0xed, 0xd0,
	0xb7, 0xa7, 0x9b, 0x8c, 0xcb, 0xfa, 0x57, 0xa4, 0xe0, 0x5f, 0x82, 0x25, 0x39, 0xe4, 0xb4, 0x3f,
	0xc9, 0x5a, 0x2f, 0xb5, 0x71, 0x3f, 0x9d, 0x65, 0x96, 0x9e, 0x16, 0xb2, 0x19, 0x6c, 0x51, 0x66,
	0xbe, 0xe0, 0x77, 0xc0, 0x4d, 0xfd, 0xd8, 0xba, 0x85, 0xf0, 0x76, 0xff, 0xb0, 0x68, 0xb3, 0x8e,
	0x9d, 0x3e, 0xdc, 0xfe, 0x8a, 0xb8, 0x4a, 0x80, 0x3e, 0x78, 0x64, 0x73, 0x4c, 0xc2, 0xd9, 0x88,
	0xc8, 0x21, 0x19, 0x0b, 0x34, 0x22, 0x7c, 0x40, 0xbc, 0xbd, 0x99, 0xa9, 0x66, 0xdd, 0x88, 0x76,
	0x26, 0x92, 0x47, 0x4a, 0x10, 0xfe, 0x1e, 0x7c, 0x70, 0x4e, 0x38, 0xed, 0x5f, 0x66, 0x13, 0x04,
	0xc2, 0x12, 0x05, 0x11, 0x25, 0xb1, 0xf4, 0x3e, 0x9f, 0x09, 0xfc, 0xd8, 0xc8, 0x67, 0xac, 0x5c,
	0x95, 0x35, 0x2d, 0x0c, 0x77, 0x41, 0x3e, 0xc0, 0xde, 0x17, 0x1a, 0x62, 0x6b, 0x66, 0xb2, 0xa9,
	0xfa, 0xf9, 0x00, 0xc3, 0x53, 0xb0, 0x4a, 0x2e, 0x24, 0x89, 0x85, 0x0a, 0xe2, 0x84, 0xb3, 0x73,
	0x1a, 0x12, 0x2e, 0xbc, 0xaf, 0xb4, 0x0d, 0x67, 0x3e, 0x98, 0x8d, 0x54, 0xb4, 0x63, 0x25, 0x7d,
	0x48, 0xae, 0x93, 0x04, 0x0c, 0xc1, 0x6a, 0x48, 0x45, 0xc0, 0xce, 0x09, 0xbf, 0x9c, 0x14, 0x0f,
	0xc2, 0xfb, 0xad, 0xd6, 0xb1, 0x57, 0x31, 0xc5, 0x6b, 0x25, 0x5b, 0xbc, 0x56, 0x92, 0xb3, 0x81,
	0x22, 0x88, 0x8a, 0x2a, 0x5e, 0x2b, 0xe7, 0x2f, 0x2b, 0x2d, 0x7c, 0x4a, 0xa2, 0xb4, 0xc2, 0xf0,
	0xe1, 0x04, 0x2f, 0x25, 0x89, 0xf2, 0x3f, 0xe7, 0xc0, 0xfa, 0xad, 0xaf, 0x11, 0x3c, 0x06, 0x05,
	0x5d, 0x16, 0xe5, 0x74, 0x14, 0xfe, 0xe6, 0x47, 0x3d, 0x69, 0x15, 0x5d, 0x1b, 0x69, 0x9c, 0xad,
	0x3a, 0x28, 0xe8, 0x92, 0xa8, 0x04, 0x96, 0xfc, 0xc6, 0xeb, 0xc3, 0x6e, 0xcf, 0xff, 0x16, 0xb5,
	0x8f, 0x5b, 0xdf, 0xba, 0xf7, 0xe0, 0x12, 0x58, 0xa8, 0xb6, 0x5a, 0xed, 0xaf, 0x51, 0xf5, 0xf8,
	0x5b, 0x37, 0xb7, 0x55, 0x70, 0xf2, 0x6e, 0xfe, 0xc5, 0xda, 0x9b, 0x43, 0xbf, 0x77, 0x52, 0x6d,
	0xa1, 0x6e, 0xc3, 0x7f, 0x73, 0x58, 0x6b, 0x68, 0xe6, 0xf2, 0x00, 0xac, 0x5c, 0x4b, 0xf8, 0x10,
	0x82, 0xb9, 0x84, 0x8c, 0xf4, 0x3e, 0x17, 0x0e, 0xee, 0xf9, 0xea, 0x03, 0x7e, 0x0a, 0x4a, 0x22,
	0xa1, 0xfd, 0x3e, 0x41, 0xa7, 0xe3, 0x38, 0x8c, 0x08, 0x1a, 0xf3, 0xc8, 0xcb, 0x5b, 0x8e, 0x15,
	0xb3, 0xb4, 0xaf, 0x57, 0x4e, 0x78, 0xb4, 0x0f, 0x81, 0x9b, 0x75, 0xac, 0x10, 0x4b, 0x5c, 0xfe,
	0x3b, 0xb0, 0x98, 0x8d, 0x20, 0xf8, 0x0b, 0xb0, 0xac, 0x52, 0x1b, 0x8a, 0xe8, 0x88, 0x4a, 0x0d,
	0x97, 0x33, 0x75, 0xa8, 0xa2, 0xb6, 0x14, 0xf1, 0x84, 0x47, 0xf0, 0x35, 0x80, 0x19, 0xae, 0xb4,
	0xdc, 0xce, 0xcf, 0x4a, 0x87, 0xee, 0x04, 0xc4, 0x96, 0xd9, 0xe5, 0x7f, 0xc9, 0x81, 0x95, 0x6b,
	0xb1, 0x06, 0x7b, 0xc0, 0x99, 0x84, 0x6b, 0x4e, 0x43, 0x7e, 0xf9, 0x9e, 0xe1, 0x5a, 0x99, 0xc4,
	0xed, 0x04, 0x09, 0xae, 0x81, 0xfb, 0x43, 0x26, 0xa4, 0xf0, 0xf2, 0xfa, 0xf5, 0x31, 0x1f, 0xe5,
	0x1d, 0xe0, 0x4c, 0xf4, 0x7e, 0x04, 0x96, 0xd2, 0xdc, 0xa7, 0xd3, 0xbf, 0x56, 0xee, 0xf8, 0x8b,
	0x96, 0xa8, 0xdf, 0x8b, 0xf2, 0x7f, 0xe5, 0x40, 0xbe, 0x56, 0x85, 0x1e, 0x98, 0xc7, 0x61, 0xa8,
	0x0a, 0x5b, 0x6b, 0x9f, 0xf4, 0x13, 0xb6, 0xc1, 0xa2, 0x8c, 0xc4, 0x34, 0xe1, 0xe4, 0xaf, 0xa4,
	0xb1, 0x5b, 0xfb, 0x06, 0x1d, 0xa0, 0xbd, 0x56, 0x77, 0xb2, 0xeb, 0xa2, 0x8c, 0xc4, 0x64, 0x5b,
	0xfb, 0x60, 0x85, 0x93, 0xbf, 0x1d, 0x13, 0x31, 0x35, 0xf4, 0xdc, 0xcc, 0x77, 0xc7, 0x4a, 0xa4,
	0xdd, 0xcc, 0x87, 0xa0, 0xa8, 0xf5, 0x87, 0x48, 0xd0, 0x90, 0xe8, 0xc6, 0xcd, 0xf1, 0x81, 0x21,
	0x75, 0x69, 0x48, 0xca, 0xff, 0xf3, 0x08, 0x94, 0x6e, 0xc4, 0x2b, 0x84, 0xa0, 0xa0, 0x1f, 0x00,
	0x73, 0x44, 0xfd, 0x1b, 0xfe, 0x7d, 0x0e, 0xac, 0x99, 0xa2, 0x94, 0x5c, 0x48, 0x55, 0x60, 0x0d,
	0xdf, 0xe9, 0x46, 0xcf, 0x1e, 0xf4, 0x9b, 0xf7, 0xce, 0x0a, 0x15, 0x5d, 0xc1, 0x2a, 0x32, 0x8f,
	0x71, 0x54, 0x1d, 0xcb, 0x21, 0xe3, 0xf4, 0x9d, 0x3e, 0x87, 0x6e, 0x15, 0x2d, 0xdb, 0xc1, 0x3d,
	0xbf, 0x44, 0x2c, 0xa7, 0x62, 0x7a, 0xa7, 0x16, 0x6f, 0xdd, 0xcd, 0x80, 0x27, 0x81, 0x35, 0xd1,
	0xcf, 0xba, 0x9b, 0xd7, 0x3c, 0x09, 0x7e, 0x70, 0x37, 0x6a, 0x11, 0x72, 0x00, 0x58, 0x42, 0xe2,
	0x80, 0xc4, 0x62, 0x2c, 0xb4, 0x95, 0x8b, 0xbb, 0x9d, 0x1f, 0xb9, 0x05, 0xdb, 0x08, 0xb5, 0x13,
	0x12, 0xd7, 0x34, 0x5e, 0x46, 0x75, 0x46, 0x0b, 0xa4, 0xe0, 0xc1, 0x3b, 0x9a, 0x9c, 0xd1, 0x58,
	0x37, 0xd9, 0xc5, 0xdd, 0xf6, 0x4f, 0xd3, 0xf7, 0x9d, 0xc6, 0xaa, 0x76, 0x0e, 0x33, 0xea, 0xac,
	0x02, 0xc8, 0xc0, 0x42, 0x44, 0x07, 0x43, 0x29, 0x24, 0x49, 0x6c, 0xab, 0xfe, 0x13, 0xb5, 0xb5,
	0x14, 0x5c, 0x57, 0x92, 0xec, 0x2d, 0x4f, 0x75, 0x40, 0x0a, 0xe6, 0x55, 0x92, 0x0a, 0xd9, 0x40,
	0x77, 0xc3, 0xc5, 0xdd, 0xa3, 0x9f, 0xa6, 0xae, 0x6e, 0xc0, 0x32, 0xca, 0x52, 0x7c, 0x48, 0x41,
	0x51, 0x48, 0x1c, 0x9c, 0x85, 0x9c, 0x9e, 0x13, 0xae, 0xbb, 0xea, 0xe2, 0x6e, 0xe3, 0xfd, 0xd5,
	0x75, 0xa7, 0x20, 0x19, 0x35, 0x59, 0xec, 0xf2, 0xff, 0xe6, 0xc1, 0xf3, 0x3f, 0xcc, 0xe7, 0x55,
	0x9a, 0x49, 0xdb, 0x46, 0x9b, 0x66, 0xec, 0xa7, 0x0a, 0x4d, 0x3d, 0x59, 0x51, 0x51, 0xb7, 0xe4,
	0xeb, 0xdf, 0x2a, 0xca, 0x13, 0x2c, 0x87, 0x28, 0xe1, 0xa4, 0x4f, 0x2f, 0x74, 0x08, 0x2c, 0xf8,
	0x40, 0x91, 0x3a, 0x9a, 0x02, 0x9f, 0x80, 0x85, 0x3e, 0xa6, 0x11, 0x52, 0xee, 0x63, 0x93, 0x80,
	0xa3, 0x08, 0xca, 0xc9, 0x54, 0xc7, 0xad, 0x4a, 0xbe, 0xb1, 0x40, 0x2c, 0x46, 0x84, 0x73, 0xc6,
	0xb5, 0x47, 0x2d, 0xf8, 0x4b, 0x86, 0xdc, 0x8e, 0x1b, 0x8a, 0x08, 0xbf, 0x00, 0x1e, 0x8d, 0x83,
	0x68, 0x1c, 0x12, 0x34, 0x24, 0x58, 0xbd, 0xe1, 0x88, 0xc6, 0x28, 0x18, 0x92, 0xe0, 0xcc, 0x7b,
	0xa0, 0x73, 0xeb, 0xba, 0x5d, 0x3f, 0x30, 0xcb, 0x87, 0x71, 0x4d, 0x2d, 0xc2, 0x3f, 0x07, 0x1f,
	0xa4, 0x02, 0x92, 0xa1, 0x71, 0x22, 0x24, 0x27, 0x78, 0xa4, 0xb4, 0xe1, 0x28, 0x62, 0x6f, 0xbd,
	0x79, 0x2d, 0xec, 0x59, 0x9e, 0x1e, 0x3b, 0xb1, 0x1c, 0xed, 0xb8, 0xaa, 0xd6, 0xe1, 0x5f, 0x80,
	0xa7, 0x19, 0xf9, 0x90, 0xbd, 0x8d, 0xa7, 0x08, 0x21, 0x89, 0x2f, 0x3d, 0x47, 0x03, 0x3c, 0x9e,
	0x00, 0xd4, 0x27, 0x2c, 0xed, 0xb8, 0x4e, 0xe2, 0xcb, 0xf2, 0x3f, 0xe5, 0xee, 0xb2, 0x7c, 0x36,
	0xbe, 0xdf, 0xd3, 0xf2, 0x57, 0x0c, 0x3b, 0x37, 0xdb, 0xb0, 0x85, 0x5b, 0x0c, 0x5b, 0xfe, 0xc7,
	0x3c, 0xd8, 0xb8, 0x3b, 0xf4, 0xef, 0x78, 0x76, 0xde, 0x82, 0xf9, 0x80, 0xc5, 0x92, 0x5c, 0x48,
	0xfd, 0xc0, 0x2d, 0xef, 0xfe, 0xf5, 0xcf, 0x9d, 0x77, 0x2a, 0x6a, 0x85, 0xd4, 0x8c, 0x12, 0x3f,
	0xd5, 0xb6, 0x45, 0xc0, 0x62, 0x76, 0x01, 0xae, 0x80, 0xe2, 0xc9, 0x71, 0xb7, 0xd3, 0xa8, 0x1d,
	0xbe, 0x3a, 0x6c, 0xd4, 0xdd, 0x7b, 0x70, 0x1d, 0x94, 0xbe, 0xde, 0xab, 0xa1, 0x9e, 0x5f, 0xad,
	0x35, 0x50, 0xad, 0x7d, 0xdc, 0x6b, 0x7c, 0xd3, 0x73, 0x73, 0x70, 0x11, 0x38, 0xaf, 0xfd, 0x4e,
	0x0d, 0xed, 0x1f, 0x1e, 0xbb, 0x79, 0xf8, 0x08, 0xac, 0xd6, 0x5a, 0xed, 0x93, 0xfa, 0x35, 0xb6,
	0x39, 0xf8, 0x00, 0xe4, 0xf7, 0xf7, 0xdc, 0x42, 0xf9, 0x0b, 0xf0, 0xe4, 0x8e, 0x48, 0xfe, 0x61,
	0xc3, 0x94, 0xff, 0x35, 0x0f, 0x9e, 0xde, 0x99, 0x72, 0xee, 0x30, 0xea, 0x33, 0xb0, 0x68, 0x07,
	0x38, 0x92, 0x9d, 0x91, 0xd8, 0x54, 0x56, 0x7e, 0xd1, 0xd0, 0x7a, 0x8a, 0x04, 0xff, 0x21, 0xa7,
	0x27, 0xa3, 0x09, 0x1e, 0x98, 0x56, 0x57, 0xd5, 0x80, 0xc2, 0x9b, 0xd3, 0x57, 0x80, 0x7e, 0xe6,
	0xe4, 0x58, 0xe9, 0x4c, 0x15, 0xe9, 0x8a, 0xd3, 0x4d, 0xae, 0x12, 0xc4, 0xd6, 0x2b, 0xb0, 0x72,
	0x8d, 0x09, 0x2e, 0x80, 0xfb, 0x8d, 0xe3, 0x37, 0x6d, 0x5b, 0x80, 0xb6, 0x0e, 0x5f, 0x1f, 0xf4,
	0xba, 0xbd, 0x46, 0xc7, 0xcd, 0x59, 0xdb, 0xe6, 0x55, 0xa9, 0x7a, 0xcd, 0xec, 0xe5, 0xa3, 0xab,
	0x46, 0xbb, 0xf1, 0x2a, 0xbc, 0x5f, 0x7c, 0x94, 0xff, 0xef, 0x01, 0x58, 0xbd, 0x25, 0x33, 0xaa,
	0xa2, 0x2c, 0x24, 0xa7, 0xe3, 0x81, 0x2d, 0xb5, 0xcc, 0x07, 0x3c, 0x02, 0x6b, 0x23, 0x7c, 0xa1,
	0xe7, 0x83, 0xaa, 0xfd, 0x91, 0x9c, 0x9e, 0x8e, 0x55, 0x63, 0x69, 0x2a, 0x8c, 0x27, 0x37, 0xca,
	0x9e, 0xc3, 0x58, 0x7e, 0xfe, 0x99, 0x69, 0x80, 0xe0, 0x08, 0x5f, 0x68, 0x77, 0xac, 0x4e, 0xc4,
	0x60, 0x1b, 0xac, 0x67, 0xe0, 0xe2, 0x98, 0x49, 0x6d, 0x1c, 0x61, 0x6b, 0x84, 0x3b, 0xf1, 0x56,
	0x27, 0x78, 0x53, 0x39, 0xd8, 0x03, 0xde, 0x14, 0x70, 0x44, 0x84, 0xc0, 0x03, 0x82, 0xc8, 0x39,
	0x89, 0x65, 0xfa, 0xe8, 0xdf, 0x89, 0xb9, 0x9e, 0x62, 0x1e, 0x19, 0xd1, 0x86, 0x96, 0x84, 0xdf,
	0x80, 0x27, 0x0a, 0x35, 0x62, 0x03, 0x74, 0x8a, 0x65, 0x30, 0x44, 0x82, 0xbe, 0x23, 0x2a, 0xb5,
	0x9e, 0x5e, 0xaa, 0xc3, 0xdf, 0xff, 0x61, 0xe0, 0xbd, 0x5d, 0x03, 0xfc, 0x70, 0x84, 0x2f, 0x5a,
	0x6c, 0xb0, 0xaf, 0xa4, 0xbb, 0xf4, 0x1d, 0x39, 0x8c, 0xf7, 0x95, 0x28, 0x3c, 0x04, 0xab, 0x0a,
	0x95, 0x13, 0x3d, 0x80, 0x49, 0xff, 0x85, 0x98, 0x3d, 0x6c, 0x2f, 0x45, 0x6c, 0xe0, 0x6b, 0xa1,
	0x94, 0x04, 0x3b, 0xe0, 0xa1, 0x6d, 0x7b, 0x15, 0x62, 0xc0, 0x46, 0x89, 0x0a, 0x14, 0x85, 0x36,
	0x3f, 0xb3, 0x39, 0x5d, 0x33, 0x92, 0x2d, 0x36, 0xa8, 0x4d, 0xe5, 0xe0, 0x76, 0x66, 0x58, 0x17,
	0x52, 0xa9, 0x27, 0x9c, 0x8e, 0xf6, 0x86, 0xc9, 0x40, 0x2e, 0xa4, 0xb2, 0xc5, 0x06, 0xf0, 0xcf,
	0x80, 0x1d, 0x9a, 0x2a, 0x9b, 0x0f, 0x11, 0x09, 0x07, 0x44, 0xd8, 0x43, 0xd1, 0x78, 0xa0, 0xe7,
	0xda, 0x8e, 0xef, 0x19, 0x16, 0x15, 0x64, 0x0d, 0xc5, 0xe0, 0xa7, 0xeb, 0xf0, 0xaf, 0xc0, 0xd3,
	0xdb, 0xe4, 0xa6, 0xf6, 0x00, 0xb3, 0xec, 0xa1, 0xff, 0x01, 0xba, 0x8a, 0x3a, 0x31, 0x4c, 0x13,
	0x28, 0x57, 0x41, 0x09, 0x21, 0x1c, 0x05, 0x38, 0x18, 0x12, 0x7d, 0x7d, 0x5e, 0x71, 0xf6, 0xad,
	0xb9, 0x23, 0x7c, 0xd1, 0x21, 0x84, 0xd7, 0x94, 0x94, 0xba, 0x36, 0xd8, 0x32, 0xfe, 0x6f, 0x36,
	0x3a, 0xf5, 0x05, 0x3d, 0x28, 0x9f, 0x01, 0x56, 0x1a, 0xe1, 0x0b, 0xbd, 0xc3, 0x89, 0x13, 0xec,
	0x03, 0xe0, 0xa4, 0xad, 0xfb, 0x56, 0x13, 0xac, 0xdf, 0x3a, 0xd7, 0xbf, 0x99, 0xb5, 0xe7, 0xc1,
	0x5c, 0xfb, 0xd5, 0x2b, 0x37, 0x07, 0x8b, 0x60, 0xbe, 0xde, 0x78, 0x55, 0x3d, 0x69, 0xf5, 0xdc,
	0x3c, 0x04, 0xe0, 0x41, 0xb7, 0xe7, 0x1f, 0xd6, 0x7a, 0xee, 0xdc, 0xd6, 0x73, 0x00, 0xd4, 0xf3,
	0x69, 0xdb, 0x68, 0x07, 0x14, 0x8e, 0xdb, 0xc7, 0x0d, 0xf7, 0x1e, 0x5c, 0x06, 0xe0, 0xe8, 0x44,
	0x77, 0xb4, 0xbd, 0x56, 0xd7, 0xcd, 0x6d, 0x7d, 0x02, 0x4a, 0x37, 0x46, 0xe7, 0x8a, 0x5d, 0x67,
	0x9a, 0x7b, 0xea, 0x57, 0xb3, 0xdb, 0x3e, 0x76, 0x73, 0x5b, 0xbb, 0x60, 0xe5, 0xda, 0x8c, 0x0b,
	0x42, 0xb0, 0x5c, 0x6f, 0xa3, 0xe3, 0x76, 0x0f, 0x9d, 0x74, 0x5e, 0xfb, 0xd5, 0xba, 0xc2, 0x2f,
	0x82, 0xf9, 0xf4, 0x23, 0xd7, 0x2c, 0x38, 0x39, 0x37, 0xdf, 0x54, 0x9d, 0xf4, 0x5c, 0xb3, 0xe0,
	0xcc, 0xb9, 0x85, 0x66, 0xc1, 0xf9, 0x95, 0xfb, 0xb2, 0x59, 0x70, 0x1e, 0xbb, 0xe5, 0x66, 0xc1,
	0xd9, 0x70, 0x3f, 0x6c, 0x16, 0x1c, 0xe0, 0x16, 0x9b, 0x05, 0xa7, 0xe8, 0x2e, 0x36, 0x0b, 0xce,
	0x8a, 0xeb, 0x36, 0x0b, 0x8e, 0xeb, 0x96, 0x9a, 0x05, 0x07, 0xba, 0xab, 0xcd, 0x82, 0xb3, 0xea,
	0xae, 0x35, 0x0b, 0xce, 0x9a, 0xbb, 0xde, 0x2c, 0x38, 0xeb, 0xee, 0xc3, 0x66, 0xc1, 0x79, 0xe4,
	0x7a, 0xcd, 0x82, 0xf3, 0xd4, 0xdd, 0x68, 0x16, 0x9c, 0x5f, 0xbb, 0x9f, 0x37, 0x0b, 0xce, 0xc7,
	0xee, 0xf3, 0x66, 0xc1, 0x79, 0xee, 0x7e, 0xd2, 0x2c, 0x38, 0x9f, 0xb8, 0xdb, 0x3e, 0x1c, 0xd1,
	0x0b, 0x75, 0xd3, 0xaa, 0xb0, 0xd1, 0xc3, 0x52, 0xc2, 0xfd, 0x55, 0x43, 0xb3, 0x61, 0x66, 0x89,
	0xeb, 0xe9, 0x20, 0xdf, 0x0c, 0xfb, 0x8c, 0x84, 0xf0, 0x27, 0xf3, 0x7d, 0x23, 0xa3, 0xff, 0x29,
	0x33, 0x82, 0xc2, 0x7f, 0x98, 0x65, 0x45, 0x93, 0xba, 0xc2, 0xff, 0x58, 0xf5, 0x6e, 0x01, 0xe6,
	0xaa, 0xfa, 0x91, 0x24, 0x22, 0x23, 0x22, 0xf5, 0xc8, 0x44, 0xc7, 0x11, 0xc2, 0xfd, 0x3e, 0x8d,
	0xa9, 0xbc, 0xf4, 0x8b, 0xaa, 0x0b, 0xb2, 0xea, 0xfc, 0x12, 0x0f, 0xa7, 0x33, 0xcb, 0x90, 0x44,
	0xf8, 0xd2, 0x5f, 0x32, 0x2a, 0xed, 0x1b, 0xe7, 0xa7, 0xff, 0x57, 0x98, 0x19, 0x93, 0xee, 0x0f,
	0xaf, 0xec, 0xd5, 0x5f, 0x14, 0xa1, 0x40, 0xe3, 0x50, 0x20, 0x55, 0x48, 0xfa, 0x25, 0x71, 0x03,
	0x30, 0xcd, 0x08, 0x6a, 0x45, 0xbf, 0x93, 0x68, 0xc4, 0xc6, 0xb1, 0xf4, 0xa1, 0x16, 0x14, 0x04,
	0x9d, 0x7d, 0x29, 0x90, 0xc0, 0xe8, 0x6f, 0xde, 0x4a, 0xbf, 0x2c, 0x09, 0x1f, 0xa5, 0x63, 0xe1,
	0x90, 0x63, 0x1a, 0x4f, 0xe2, 0xcf, 0x5f, 0x4b, 0x6d, 0x62, 0x2d, 0xa8, 0x3d, 0xdf, 0xf7, 0xb2,
	0x5f, 0x48, 0xc7, 0x45, 0x2c, 0x39, 0x25, 0xc2, 0x5f, 0xbf, 0xb1, 0xa2, 0xfa, 0xe3, 0xad, 0xff,
	0xc8, 0x81, 0xc5, 0xec, 0xbf, 0x03, 0x7f, 0xcc, 0x5e, 0xbd, 0x03, 0xd6, 0xc4, 0xf8, 0x54, 0x04,
	0x9c, 0x9e, 0x92, 0x10, 0x71, 0x92, 0xfe, 0x93, 0x61, 0xea, 0x81, 0xa7, 0xb7, 0xd6, 0x03, 0xbe,
	0xe5, 0xf2, 0x57, 0xa7, 0xa2, 0x29, 0x4d, 0x6c, 0xfd, 0x0e, 0x14, 0x33, 0x83, 0x20, 0x55, 0xe2,
	0x0b, 0x12, 0x70, 0x62, 0x27, 0xb3, 0xe6, 0x3c, 0xc0, 0x90, 0xf4, 0x30, 0xf6, 0x09, 0x58, 0x08,
	0x63, 0x61, 0x86, 0xe6, 0x76, 0xd4, 0xe1, 0x84, 0xb1, 0xd0, 0xf3, 0xf2, 0x17, 0x9b, 0xc0, 0x49,
	0x91, 0xe1, 0x1a, 0x70, 0xd3, 0x89, 0x53, 0x3a, 0xa7, 0x72, 0xef, 0xed, 0x6f, 0xff, 0xfb, 0xf7,
	0x1b, 0xb9, 0xff, 0xfc, 0x7e, 0x23, 0xf7, 0xdf, 0xdf, 0x6f, 0xe4, 0xbe, 0x2b, 0x9b, 0xfd, 0x9a,
	0x3f, 0x8f, 0x77, 0xae, 0xfc, 0x1d, 0x7d, 0xfa, 0x40, 0xa7, 0x9f, 0xbd, 0xff, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x8e, 0xe1, 0x5e, 0x00, 0x17, 0x1f, 0x00, 0x00,
}

func (m *MeshConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DiscoverySelectors) > 0 {
		for iNdEx := len(m.DiscoverySelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiscoverySelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.CaCertificates) > 0 {
		for iNdEx := len(m.CaCertificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CaCertificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.ExtensionProviders) > 0 {
		for iNdEx := len(m.ExtensionProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtensionProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xca
		}
	}
	if m.DisableEnvoyListenerLog {
		i--
		if m.DisableEnvoyListenerLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.Ca != nil {
		{
			size, err := m.Ca.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if m.VerifyCertificateAtClient != nil {
		{
			size, err := m.VerifyCertificateAtClient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if len(m.IngressSelector) > 0 {
		i -= len(m.IngressSelector)
		copy(dAtA[i:], m.IngressSelector)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.IngressSelector)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if m.EnablePrometheusMerge != nil {
		{
			size, err := m.EnablePrometheusMerge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ServiceSettings) > 0 {
		for iNdEx := len(m.ServiceSettings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceSettings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.ThriftConfig != nil {
		{
			size, err := m.ThriftConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Certificates) > 0 {
		for iNdEx := len(m.Certificates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Certificates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.TrustDomainAliases) > 0 {
		for iNdEx := len(m.TrustDomainAliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TrustDomainAliases[iNdEx])
			copy(dAtA[i:], m.TrustDomainAliases[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.TrustDomainAliases[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.OutboundClusterStatName) > 0 {
		i -= len(m.OutboundClusterStatName)
		copy(dAtA[i:], m.OutboundClusterStatName)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.OutboundClusterStatName)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	if len(m.InboundClusterStatName) > 0 {
		i -= len(m.InboundClusterStatName)
		copy(dAtA[i:], m.InboundClusterStatName)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.InboundClusterStatName)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	if m.EnableAutoMtls != nil {
		{
			size, err := m.EnableAutoMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	if m.ProtocolDetectionTimeout != nil {
		{
			size, err := m.ProtocolDetectionTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	if m.H2UpgradePolicy != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.H2UpgradePolicy))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.EnableEnvoyAccessLogService {
		i--
		if m.EnableEnvoyAccessLogService {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.DnsRefreshRate != nil {
		{
			size, err := m.DnsRefreshRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if m.LocalityLbSetting != nil {
		{
			size, err := m.LocalityLbSetting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.RootNamespace) > 0 {
		i -= len(m.RootNamespace)
		copy(dAtA[i:], m.RootNamespace)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.RootNamespace)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.DefaultDestinationRuleExportTo) > 0 {
		for iNdEx := len(m.DefaultDestinationRuleExportTo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultDestinationRuleExportTo[iNdEx])
			copy(dAtA[i:], m.DefaultDestinationRuleExportTo[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.DefaultDestinationRuleExportTo[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.DefaultVirtualServiceExportTo) > 0 {
		for iNdEx := len(m.DefaultVirtualServiceExportTo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultVirtualServiceExportTo[iNdEx])
			copy(dAtA[i:], m.DefaultVirtualServiceExportTo[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.DefaultVirtualServiceExportTo[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.DefaultServiceExportTo) > 0 {
		for iNdEx := len(m.DefaultServiceExportTo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultServiceExportTo[iNdEx])
			copy(dAtA[i:], m.DefaultServiceExportTo[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.DefaultServiceExportTo[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.TcpKeepalive != nil {
		{
			size, err := m.TcpKeepalive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.AccessLogEncoding != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.AccessLogEncoding))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if len(m.TrustDomain) > 0 {
		i -= len(m.TrustDomain)
		copy(dAtA[i:], m.TrustDomain)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.TrustDomain)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.AccessLogFormat) > 0 {
		i -= len(m.AccessLogFormat)
		copy(dAtA[i:], m.AccessLogFormat)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AccessLogFormat)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.ConfigSources) > 0 {
		for iNdEx := len(m.ConfigSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConfigSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.OutboundTrafficPolicy != nil {
		{
			size, err := m.OutboundTrafficPolicy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.DefaultConfig != nil {
		{
			size, err := m.DefaultConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.AccessLogFile) > 0 {
		i -= len(m.AccessLogFile)
		copy(dAtA[i:], m.AccessLogFile)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AccessLogFile)))
		i--
		dAtA[i] = 0x6a
	}
	if m.EnableTracing {
		i--
		if m.EnableTracing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IngressControllerMode != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.IngressControllerMode))
		i--
		dAtA[i] = 0x48
	}
	if len(m.IngressService) > 0 {
		i -= len(m.IngressService)
		copy(dAtA[i:], m.IngressService)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.IngressService)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.IngressClass) > 0 {
		i -= len(m.IngressClass)
		copy(dAtA[i:], m.IngressClass)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.IngressClass)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ConnectTimeout != nil {
		{
			size, err := m.ConnectTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ProxyHttpPort != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ProxyHttpPort))
		i--
		dAtA[i] = 0x28
	}
	if m.ProxyListenPort != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ProxyListenPort))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_OutboundTrafficPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_OutboundTrafficPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_OutboundTrafficPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Mode != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_CertificateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_CertificateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_CertificateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CertificateData != nil {
		{
			size := m.CertificateData.Size()
			i -= size
			if _, err := m.CertificateData.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_CertificateData_Pem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_CertificateData_Pem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Pem)
	copy(dAtA[i:], m.Pem)
	i = encodeVarintConfig(dAtA, i, uint64(len(m.Pem)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *MeshConfig_CertificateData_SpiffeBundleUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_CertificateData_SpiffeBundleUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SpiffeBundleUrl)
	copy(dAtA[i:], m.SpiffeBundleUrl)
	i = encodeVarintConfig(dAtA, i, uint64(len(m.SpiffeBundleUrl)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ThriftConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ThriftConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ThriftConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RateLimitTimeout != nil {
		{
			size, err := m.RateLimitTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RateLimitUrl) > 0 {
		i -= len(m.RateLimitUrl)
		copy(dAtA[i:], m.RateLimitUrl)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.RateLimitUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ServiceSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ServiceSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ServiceSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hosts) > 0 {
		for iNdEx := len(m.Hosts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hosts[iNdEx])
			copy(dAtA[i:], m.Hosts[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.Hosts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ServiceSettings_Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ServiceSettings_Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ServiceSettings_Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClusterLocal {
		i--
		if m.ClusterLocal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_CA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_CA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_CA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IstiodSide {
		i--
		if m.IstiodSide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.RequestTimeout != nil {
		{
			size, err := m.RequestTimeout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TlsSettings != nil {
		{
			size, err := m.TlsSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Provider != nil {
		{
			size := m.Provider.Size()
			i -= size
			if _, err := m.Provider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnvoyExtAuthzHttp != nil {
		{
			size, err := m.EnvoyExtAuthzHttp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnvoyExtAuthzGrpc != nil {
		{
			size, err := m.EnvoyExtAuthzGrpc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_Opencensus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_Opencensus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Opencensus != nil {
		{
			size, err := m.Opencensus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_Zipkin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_Zipkin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Zipkin != nil {
		{
			size, err := m.Zipkin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_Lightstep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_Lightstep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Lightstep != nil {
		{
			size, err := m.Lightstep.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_Datadog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_Datadog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Datadog != nil {
		{
			size, err := m.Datadog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_Stackdriver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_Stackdriver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Stackdriver != nil {
		{
			size, err := m.Stackdriver.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HeadersToDownstreamOnDeny) > 0 {
		for iNdEx := len(m.HeadersToDownstreamOnDeny) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HeadersToDownstreamOnDeny[iNdEx])
			copy(dAtA[i:], m.HeadersToDownstreamOnDeny[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.HeadersToDownstreamOnDeny[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.HeadersToUpstreamOnAllow) > 0 {
		for iNdEx := len(m.HeadersToUpstreamOnAllow) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HeadersToUpstreamOnAllow[iNdEx])
			copy(dAtA[i:], m.HeadersToUpstreamOnAllow[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.HeadersToUpstreamOnAllow[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.IncludeHeadersInCheck) > 0 {
		for iNdEx := len(m.IncludeHeadersInCheck) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IncludeHeadersInCheck[iNdEx])
			copy(dAtA[i:], m.IncludeHeadersInCheck[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.IncludeHeadersInCheck[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.StatusOnError) > 0 {
		i -= len(m.StatusOnError)
		copy(dAtA[i:], m.StatusOnError)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.StatusOnError)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FailOpen {
		i--
		if m.FailOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.PathPrefix) > 0 {
		i -= len(m.PathPrefix)
		copy(dAtA[i:], m.PathPrefix)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.PathPrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StatusOnError) > 0 {
		i -= len(m.StatusOnError)
		copy(dAtA[i:], m.StatusOnError)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.StatusOnError)))
		i--
		dAtA[i] = 0x22
	}
	if m.FailOpen {
		i--
		if m.FailOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Context) > 0 {
		dAtA25 := make([]byte, len(m.Context)*10)
		var j24 int
		for _, num := range m.Context {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintConfig(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropagationModes) > 0 {
		dAtA27 := make([]byte, len(m.PropagationModes)*10)
		var j26 int
		for _, num := range m.PropagationModes {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		i -= j26
		copy(dAtA[i:], dAtA27[:j26])
		i = encodeVarintConfig(dAtA, i, uint64(j26))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxEdgesBatchSize != nil {
		{
			size, err := m.MaxEdgesBatchSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.MaxPeerCacheSize != nil {
		{
			size, err := m.MaxPeerCacheSize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.MeshEdgesReportingDuration != nil {
		{
			size, err := m.MeshEdgesReportingDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.EnableMeshEdgesReporting {
		i--
		if m.EnableMeshEdgesReporting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.EnableAuditLog {
		i--
		if m.EnableAuditLog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.EnableLogCompression != nil {
		{
			size, err := m.EnableLogCompression.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LogReportDuration != nil {
		{
			size, err := m.LogReportDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.MaxLogBatchSizeInBytes != nil {
		{
			size, err := m.MaxLogBatchSizeInBytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxTraceMessageEvents != nil {
		{
			size, err := m.MaxTraceMessageEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MaxTraceAnnotations != nil {
		{
			size, err := m.MaxTraceAnnotations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxTraceAttributes != nil {
		{
			size, err := m.MaxTraceAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Debug {
		i--
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfigSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubscribedResources) > 0 {
		dAtA38 := make([]byte, len(m.SubscribedResources)*10)
		var j37 int
		for _, num := range m.SubscribedResources {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintConfig(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0x1a
	}
	if m.TlsSettings != nil {
		{
			size, err := m.TlsSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DnsNames) > 0 {
		for iNdEx := len(m.DnsNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DnsNames[iNdEx])
			copy(dAtA[i:], m.DnsNames[iNdEx])
			i = encodeVarintConfig(dAtA, i, uint64(len(m.DnsNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SecretName) > 0 {
		i -= len(m.SecretName)
		copy(dAtA[i:], m.SecretName)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.SecretName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MeshConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyListenPort != 0 {
		n += 1 + sovConfig(uint64(m.ProxyListenPort))
	}
	if m.ProxyHttpPort != 0 {
		n += 1 + sovConfig(uint64(m.ProxyHttpPort))
	}
	if m.ConnectTimeout != nil {
		l = m.ConnectTimeout.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.IngressClass)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.IngressService)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.IngressControllerMode != 0 {
		n += 1 + sovConfig(uint64(m.IngressControllerMode))
	}
	if m.EnableTracing {
		n += 2
	}
	l = len(m.AccessLogFile)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.DefaultConfig != nil {
		l = m.DefaultConfig.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.OutboundTrafficPolicy != nil {
		l = m.OutboundTrafficPolicy.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if len(m.ConfigSources) > 0 {
		for _, e := range m.ConfigSources {
			l = e.Size()
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	l = len(m.AccessLogFormat)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	l = len(m.TrustDomain)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.AccessLogEncoding != 0 {
		n += 2 + sovConfig(uint64(m.AccessLogEncoding))
	}
	if m.TcpKeepalive != nil {
		l = m.TcpKeepalive.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if len(m.DefaultServiceExportTo) > 0 {
		for _, s := range m.DefaultServiceExportTo {
			l = len(s)
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if len(m.DefaultVirtualServiceExportTo) > 0 {
		for _, s := range m.DefaultVirtualServiceExportTo {
			l = len(s)
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if len(m.DefaultDestinationRuleExportTo) > 0 {
		for _, s := range m.DefaultDestinationRuleExportTo {
			l = len(s)
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	l = len(m.RootNamespace)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.LocalityLbSetting != nil {
		l = m.LocalityLbSetting.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.DnsRefreshRate != nil {
		l = m.DnsRefreshRate.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.EnableEnvoyAccessLogService {
		n += 3
	}
	if m.H2UpgradePolicy != 0 {
		n += 2 + sovConfig(uint64(m.H2UpgradePolicy))
	}
	if m.ProtocolDetectionTimeout != nil {
		l = m.ProtocolDetectionTimeout.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.EnableAutoMtls != nil {
		l = m.EnableAutoMtls.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	l = len(m.InboundClusterStatName)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	l = len(m.OutboundClusterStatName)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	if len(m.TrustDomainAliases) > 0 {
		for _, s := range m.TrustDomainAliases {
			l = len(s)
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if m.ThriftConfig != nil {
		l = m.ThriftConfig.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if len(m.ServiceSettings) > 0 {
		for _, e := range m.ServiceSettings {
			l = e.Size()
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if m.EnablePrometheusMerge != nil {
		l = m.EnablePrometheusMerge.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	l = len(m.IngressSelector)
	if l > 0 {
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.VerifyCertificateAtClient != nil {
		l = m.VerifyCertificateAtClient.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.Ca != nil {
		l = m.Ca.Size()
		n += 2 + l + sovConfig(uint64(l))
	}
	if m.DisableEnvoyListenerLog {
		n += 3
	}
	if len(m.ExtensionProviders) > 0 {
		for _, e := range m.ExtensionProviders {
			l = e.Size()
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if len(m.CaCertificates) > 0 {
		for _, e := range m.CaCertificates {
			l = e.Size()
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if len(m.DiscoverySelectors) > 0 {
		for _, e := range m.DiscoverySelectors {
			l = e.Size()
			n += 2 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_OutboundTrafficPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovConfig(uint64(m.Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_CertificateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CertificateData != nil {
		n += m.CertificateData.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_CertificateData_Pem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pem)
	n += 1 + l + sovConfig(uint64(l))
	return n
}
func (m *MeshConfig_CertificateData_SpiffeBundleUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpiffeBundleUrl)
	n += 1 + l + sovConfig(uint64(l))
	return n
}
func (m *MeshConfig_ThriftConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RateLimitUrl)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.RateLimitTimeout != nil {
		l = m.RateLimitTimeout.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ServiceSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.Hosts) > 0 {
		for _, s := range m.Hosts {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ServiceSettings_Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterLocal {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_CA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.TlsSettings != nil {
		l = m.TlsSettings.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.RequestTimeout != nil {
		l = m.RequestTimeout.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.IstiodSide {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Provider != nil {
		n += m.Provider.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnvoyExtAuthzHttp != nil {
		l = m.EnvoyExtAuthzHttp.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnvoyExtAuthzGrpc != nil {
		l = m.EnvoyExtAuthzGrpc.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_Opencensus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opencensus != nil {
		l = m.Opencensus.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_Zipkin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Zipkin != nil {
		l = m.Zipkin.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_Lightstep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lightstep != nil {
		l = m.Lightstep.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_Datadog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Datadog != nil {
		l = m.Datadog.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_Stackdriver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stackdriver != nil {
		l = m.Stackdriver.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovConfig(uint64(m.Port))
	}
	l = len(m.PathPrefix)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.FailOpen {
		n += 2
	}
	l = len(m.StatusOnError)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.IncludeHeadersInCheck) > 0 {
		for _, s := range m.IncludeHeadersInCheck {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if len(m.HeadersToUpstreamOnAllow) > 0 {
		for _, s := range m.HeadersToUpstreamOnAllow {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if len(m.HeadersToDownstreamOnDeny) > 0 {
		for _, s := range m.HeadersToDownstreamOnDeny {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovConfig(uint64(m.Port))
	}
	if m.FailOpen {
		n += 2
	}
	l = len(m.StatusOnError)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.Context) > 0 {
		l = 0
		for _, e := range m.Context {
			l += sovConfig(uint64(e))
		}
		n += 1 + sovConfig(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.PropagationModes) > 0 {
		l = 0
		for _, e := range m.PropagationModes {
			l += sovConfig(uint64(e))
		}
		n += 1 + sovConfig(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovConfig(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshConfig_ExtensionProvider_StackdriverProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug {
		n += 2
	}
	if m.MaxTraceAttributes != nil {
		l = m.MaxTraceAttributes.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.MaxTraceAnnotations != nil {
		l = m.MaxTraceAnnotations.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.MaxTraceMessageEvents != nil {
		l = m.MaxTraceMessageEvents.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.MaxLogBatchSizeInBytes != nil {
		l = m.MaxLogBatchSizeInBytes.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.LogReportDuration != nil {
		l = m.LogReportDuration.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.EnableLogCompression != nil {
		l = m.EnableLogCompression.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.EnableAuditLog {
		n += 2
	}
	if m.EnableMeshEdgesReporting {
		n += 2
	}
	if m.MeshEdgesReportingDuration != nil {
		l = m.MeshEdgesReportingDuration.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.MaxPeerCacheSize != nil {
		l = m.MaxPeerCacheSize.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.MaxEdgesBatchSize != nil {
		l = m.MaxEdgesBatchSize.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.TlsSettings != nil {
		l = m.TlsSettings.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.SubscribedResources) > 0 {
		l = 0
		for _, e := range m.SubscribedResources {
			l += sovConfig(uint64(e))
		}
		n += 1 + sovConfig(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretName)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if len(m.DnsNames) > 0 {
		for _, s := range m.DnsNames {
			l = len(s)
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeshConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyListenPort", wireType)
			}
			m.ProxyListenPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyListenPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyHttpPort", wireType)
			}
			m.ProxyHttpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyHttpPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectTimeout == nil {
				m.ConnectTimeout = &types.Duration{}
			}
			if err := m.ConnectTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressService", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressService = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressControllerMode", wireType)
			}
			m.IngressControllerMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IngressControllerMode |= MeshConfig_IngressControllerMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTracing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTracing = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultConfig == nil {
				m.DefaultConfig = &ProxyConfig{}
			}
			if err := m.DefaultConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTrafficPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutboundTrafficPolicy == nil {
				m.OutboundTrafficPolicy = &MeshConfig_OutboundTrafficPolicy{}
			}
			if err := m.OutboundTrafficPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigSources = append(m.ConfigSources, &ConfigSource{})
			if err := m.ConfigSources[len(m.ConfigSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessLogFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessLogEncoding", wireType)
			}
			m.AccessLogEncoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessLogEncoding |= MeshConfig_AccessLogEncoding(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpKeepalive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpKeepalive == nil {
				m.TcpKeepalive = &v1alpha3.ConnectionPoolSettings_TCPSettings_TcpKeepalive{}
			}
			if err := m.TcpKeepalive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultServiceExportTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultServiceExportTo = append(m.DefaultServiceExportTo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultVirtualServiceExportTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultVirtualServiceExportTo = append(m.DefaultVirtualServiceExportTo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDestinationRuleExportTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultDestinationRuleExportTo = append(m.DefaultDestinationRuleExportTo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityLbSetting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalityLbSetting == nil {
				m.LocalityLbSetting = &v1alpha3.LocalityLoadBalancerSetting{}
			}
			if err := m.LocalityLbSetting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRefreshRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DnsRefreshRate == nil {
				m.DnsRefreshRate = &types.Duration{}
			}
			if err := m.DnsRefreshRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableEnvoyAccessLogService", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableEnvoyAccessLogService = bool(v != 0)
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H2UpgradePolicy", wireType)
			}
			m.H2UpgradePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H2UpgradePolicy |= MeshConfig_H2UpgradePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolDetectionTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolDetectionTimeout == nil {
				m.ProtocolDetectionTimeout = &types.Duration{}
			}
			if err := m.ProtocolDetectionTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAutoMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableAutoMtls == nil {
				m.EnableAutoMtls = &types.BoolValue{}
			}
			if err := m.EnableAutoMtls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundClusterStatName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundClusterStatName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundClusterStatName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundClusterStatName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustDomainAliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustDomainAliases = append(m.TrustDomainAliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &Certificate{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThriftConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThriftConfig == nil {
				m.ThriftConfig = &MeshConfig_ThriftConfig{}
			}
			if err := m.ThriftConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSettings = append(m.ServiceSettings, &MeshConfig_ServiceSettings{})
			if err := m.ServiceSettings[len(m.ServiceSettings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePrometheusMerge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnablePrometheusMerge == nil {
				m.EnablePrometheusMerge = &types.BoolValue{}
			}
			if err := m.EnablePrometheusMerge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressSelector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngressSelector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyCertificateAtClient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyCertificateAtClient == nil {
				m.VerifyCertificateAtClient = &types.BoolValue{}
			}
			if err := m.VerifyCertificateAtClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ca", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ca == nil {
				m.Ca = &MeshConfig_CA{}
			}
			if err := m.Ca.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableEnvoyListenerLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableEnvoyListenerLog = bool(v != 0)
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtensionProviders = append(m.ExtensionProviders, &MeshConfig_ExtensionProvider{})
			if err := m.ExtensionProviders[len(m.ExtensionProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCertificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCertificates = append(m.CaCertificates, &MeshConfig_CertificateData{})
			if err := m.CaCertificates[len(m.CaCertificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoverySelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoverySelectors = append(m.DiscoverySelectors, &v1.LabelSelector{})
			if err := m.DiscoverySelectors[len(m.DiscoverySelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_OutboundTrafficPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTrafficPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTrafficPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= MeshConfig_OutboundTrafficPolicy_Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_CertificateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateData = &MeshConfig_CertificateData_Pem{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpiffeBundleUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateData = &MeshConfig_CertificateData_SpiffeBundleUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ThriftConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThriftConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThriftConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateLimitUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateLimitTimeout == nil {
				m.RateLimitTimeout = &types.Duration{}
			}
			if err := m.RateLimitTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ServiceSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &MeshConfig_ServiceSettings_Settings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ServiceSettings_Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterLocal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClusterLocal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_CA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsSettings == nil {
				m.TlsSettings = &v1alpha3.ClientTLSSettings{}
			}
			if err := m.TlsSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestTimeout == nil {
				m.RequestTimeout = &types.Duration{}
			}
			if err := m.RequestTimeout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstiodSide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IstiodSide = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtensionProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtensionProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvoyExtAuthzHttp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_EnvoyExtAuthzHttp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvoyExtAuthzGrpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_EnvoyExtAuthzGrpc{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opencensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_Opencensus{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipkin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_Zipkin{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lightstep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_Lightstep{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datadog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_Datadog{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stackdriver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MeshConfig_ExtensionProvider_StackdriverProvider{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &MeshConfig_ExtensionProvider_Stackdriver{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationHttpProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyExternalAuthorizationHttpProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyExternalAuthorizationHttpProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PathPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOpen = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusOnError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusOnError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeHeadersInCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeHeadersInCheck = append(m.IncludeHeadersInCheck, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersToUpstreamOnAllow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadersToUpstreamOnAllow = append(m.HeadersToUpstreamOnAllow, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersToDownstreamOnDeny", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadersToDownstreamOnDeny = append(m.HeadersToDownstreamOnDeny, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyExternalAuthorizationGrpcProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyExternalAuthorizationGrpcProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyExternalAuthorizationGrpcProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOpen = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusOnError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusOnError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyTracingOpenCensusProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyTracingOpenCensusProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Context = append(m.Context, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Context) == 0 {
					m.Context = make([]MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MeshConfig_ExtensionProvider_EnvoyTracingOpenCensusProvider_TraceContext(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Context = append(m.Context, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingDatadogProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyTracingDatadogProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyTracingDatadogProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyTracingLightStepProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyTracingLightStepProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PropagationModes = append(m.PropagationModes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PropagationModes) == 0 {
					m.PropagationModes = make([]MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= MeshConfig_ExtensionProvider_EnvoyTracingLightStepProvider_PropagationMode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PropagationModes = append(m.PropagationModes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagationModes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_EnvoyTracingZipkinAPIProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvoyTracingZipkinAPIProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvoyTracingZipkinAPIProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshConfig_ExtensionProvider_StackdriverProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StackdriverProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StackdriverProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTraceAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTraceAttributes == nil {
				m.MaxTraceAttributes = &types.Int64Value{}
			}
			if err := m.MaxTraceAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTraceAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTraceAnnotations == nil {
				m.MaxTraceAnnotations = &types.Int64Value{}
			}
			if err := m.MaxTraceAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTraceMessageEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxTraceMessageEvents == nil {
				m.MaxTraceMessageEvents = &types.Int64Value{}
			}
			if err := m.MaxTraceMessageEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLogBatchSizeInBytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxLogBatchSizeInBytes == nil {
				m.MaxLogBatchSizeInBytes = &types.Int32Value{}
			}
			if err := m.MaxLogBatchSizeInBytes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogReportDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogReportDuration == nil {
				m.LogReportDuration = &types.Duration{}
			}
			if err := m.LogReportDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLogCompression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnableLogCompression == nil {
				m.EnableLogCompression = &types.BoolValue{}
			}
			if err := m.EnableLogCompression.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAuditLog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableAuditLog = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMeshEdgesReporting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableMeshEdgesReporting = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshEdgesReportingDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeshEdgesReportingDuration == nil {
				m.MeshEdgesReportingDuration = &types.Duration{}
			}
			if err := m.MeshEdgesReportingDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPeerCacheSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxPeerCacheSize == nil {
				m.MaxPeerCacheSize = &types.Int32Value{}
			}
			if err := m.MaxPeerCacheSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEdgesBatchSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxEdgesBatchSize == nil {
				m.MaxEdgesBatchSize = &types.Int32Value{}
			}
			if err := m.MaxEdgesBatchSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsSettings == nil {
				m.TlsSettings = &v1alpha3.ClientTLSSettings{}
			}
			if err := m.TlsSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Resource
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Resource(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubscribedResources = append(m.SubscribedResources, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthConfig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SubscribedResources) == 0 {
					m.SubscribedResources = make([]Resource, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Resource
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Resource(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubscribedResources = append(m.SubscribedResources, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribedResources", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsNames = append(m.DnsNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
