// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

// $title: Tracing V1 Alpha 1
// $overview: Configuration affecting Istio service tracing

// Provides configuration parameters for Istio tracing.
package istio.tracing.v1alpha1;

option go_package="istio.io/api/tracing/v1alpha1";

// TracingRule controls Istio mesh trace collection configuration
// parameters. It includes the configuration for the tracing backends as well
// as the rates at which distributed tracing data should be generated.
//
// Example configuration:
// ```yaml
// apiVersion: tracing.istio.io/v1alpha1
// kind: TracingConfiguration
// metadata:
//   name: meshwide
// spec:
//   traceCollector:
//     zipkinCollector:
//       address: zipkin:9411
// ```
//
// WARNING: This is not currently supported by Istio.
message TracingRule {

    // Provides a way to tailor the configuration for a specific service.
    // If not specifed, this applies to all services in the namespace of the
    // configured resource. When the namespace is `istio-system`, the settings
    // will be applied to the entire mesh.
    //
    // Example: ratings
    string service_name = 1;

    // Provides configuration for a tracing backend
    TraceCollector trace_collector = 3;

    // $hide_from_docs
    //
    // Controls the rate of trace generation.
    //
    // NOTE: This will only be effective when support for Envoy V2 APIs is added
    // to Istio Pilot.
    TraceSampling trace_sampling = 4;
}

// TraceCollector holds the configuration for a specific tracing backend.
message TraceCollector {
    oneof collector {
        // Configuration information for a Zipkin trace collector.
        ZipkinCollector zipkin_collector = 1;

        // $hide_from_docs
        //
        // Configuration information for a LightStep trace collector.
        LightStepCollector lightstep_collector = 2;
    }
}

// Configuration for a Zipkin collector.
message ZipkinCollector {

    // Required. Address of the Zipkin service (e.g. _zipkin:9411_).
    string host = 1;

    // Optional. API endpoint of the Zipkin service.
    //
    // Default: "/api/v1/spans"
    string api_endpoint = 2;
}

// $hide_from_docs
//
// Configuration for a LightStep collector.
message LightStepCollector {

    // Required. Address of the LightStep service (e.g. _collector-grpc.lightstep.com:443_).
    string host = 1;

    // Required. File containing the access token for the LightStep API.
    //
    // Default: "/app/access_token"
    string access_token_file = 2;
}

// Identifies a percentage.
message Percent {
    // Valid range: `[0.0, 100.0]`
    double value = 1;
}

// $hide_from_docs
//
// Controls the rate at which Istio will generate trace spans for requests
// within a mesh.
message TraceSampling {

    // Controls the mode of sampling.
    enum Mode {
        // Do NOT generate trace spans.
        NONE = 0;

        // Use the pre-configured minimal trace span generation settings.
        // This will generate trace spans for 1% of all requests (and 100% for
        // client-directed forced traces).
        MINIMAL = 1;

        // Use a custom sampling configuration.
        CUSTOM = 2;

        // Generate trace spans for 100% of requests, client-requested or
        // otherwise.
        ALL = 3;
    }

    // Required. Trace generation mode.
    //
    // Default: NONE
    Mode mode = 1;

    // Target percentage of requests that will be force traced if requested
    // by a client.
    //
    // Optional. Only valid when mode is set to CUSTOM.
    //
    // Default: 0.0%
    Percent client_sampling = 2;

    // Target percentage of requests managed that will be randomly selected for
    // trace generation, if not requested by the client.
    //
    // Optional. Only valid when mode is set to CUSTOM.
    //
    // Default: 0.0%
    Percent random_sampling = 3;
}

