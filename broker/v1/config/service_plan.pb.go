// Code generated by protoc-gen-go. DO NOT EDIT.
// source: broker/v1/config/service_plan.proto

package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ServicePlan defines the type of services available to Istio service
// consumers.  One or more services are included in a plan. The plan is flexible
// and subject to change along with business requirements.
type ServicePlan struct {
	// Required. Public plan information.
	Plan *CatalogPlan `protobuf:"bytes,1,opt,name=plan" json:"plan,omitempty"`
	// Required. List of the Keys of serviceclass config instance
	// that are included in the plan.
	// ServiceClass is a type of CRD resource.
	Services []string `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *ServicePlan) Reset()                    { *m = ServicePlan{} }
func (m *ServicePlan) String() string            { return proto.CompactTextString(m) }
func (*ServicePlan) ProtoMessage()               {}
func (*ServicePlan) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ServicePlan) GetPlan() *CatalogPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *ServicePlan) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

// CatalogPlan defines listing information for this service plan within the
// exposed catalog.  The message is a subset of OSBI plan fields defined in
// https://github.com/openservicebrokerapi
type CatalogPlan struct {
	// Required. Public service plan name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. Public unique service plan guid.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Required. Public short service plan description.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *CatalogPlan) Reset()                    { *m = CatalogPlan{} }
func (m *CatalogPlan) String() string            { return proto.CompactTextString(m) }
func (*CatalogPlan) ProtoMessage()               {}
func (*CatalogPlan) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CatalogPlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CatalogPlan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CatalogPlan) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*ServicePlan)(nil), "istio.broker.v1.config.ServicePlan")
	proto.RegisterType((*CatalogPlan)(nil), "istio.broker.v1.config.CatalogPlan")
}

func init() { proto.RegisterFile("broker/v1/config/service_plan.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0xd9, 0xec, 0x22, 0xee, 0x04, 0x3c, 0xe4, 0x20, 0x41, 0x10, 0xcb, 0xee, 0xa5, 0xa7,
	0x84, 0xea, 0xc1, 0xbb, 0xfe, 0x01, 0x69, 0x6f, 0x5e, 0x24, 0x6d, 0x63, 0x19, 0xac, 0x99, 0x90,
	0x84, 0xfe, 0x7e, 0x69, 0x22, 0x52, 0x64, 0x6f, 0x33, 0x6f, 0xde, 0xc7, 0x9b, 0x19, 0x38, 0xf7,
	0x81, 0xbe, 0x6c, 0xd0, 0x4b, 0xa3, 0x07, 0x72, 0x9f, 0x38, 0xe9, 0x68, 0xc3, 0x82, 0x83, 0xfd,
	0xf0, 0xb3, 0x71, 0xca, 0x07, 0x4a, 0x24, 0x6e, 0x31, 0x26, 0x24, 0x55, 0xac, 0x6a, 0x69, 0x54,
	0xb1, 0x9e, 0x7a, 0xe0, 0x5d, 0x71, 0xbf, 0xcd, 0xc6, 0x89, 0x67, 0x38, 0xac, 0x90, 0xdc, 0x55,
	0xbb, 0x9a, 0x3f, 0x9e, 0xd5, 0x65, 0x4a, 0xbd, 0x9a, 0x64, 0x66, 0x9a, 0x56, 0xa4, 0xcd, 0x80,
	0xb8, 0x83, 0xeb, 0xdf, 0xd4, 0x28, 0x59, 0xb5, 0xaf, 0x8f, 0xed, 0x5f, 0x7f, 0xea, 0x80, 0x6f,
	0x00, 0x21, 0xe0, 0xe0, 0xcc, 0xb7, 0xcd, 0x19, 0xc7, 0x36, 0xd7, 0xe2, 0x06, 0x18, 0x8e, 0x92,
	0x65, 0x85, 0xe1, 0x28, 0x2a, 0xe0, 0xa3, 0x8d, 0x43, 0x40, 0x9f, 0x90, 0x9c, 0xdc, 0xe7, 0xc1,
	0x56, 0x7a, 0x79, 0x78, 0xbf, 0x2f, 0xcb, 0x21, 0x69, 0xe3, 0x51, 0xff, 0x7f, 0x42, 0x7f, 0x95,
	0x0f, 0x7f, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x73, 0xfd, 0x79, 0x1f, 0x01, 0x00, 0x00,
}
